//===----------------------------------------- Helix -----------------------------------------====//
//                                                                                                //
//  Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).       //
//  You are allowed to use, modify, redistribute, and create derivative works, even for           //
//  commercial purposes, provided that you give appropriate credit, and indicate if changes       //
//   were made. For more information, please visit: https://creativecommons.org/licenses/by/4.0/  //
//                                                                                                //
//  SPDX-License-Identifier: CC-BY-4.0                                                            //
//  Copyright (c) 2024 (CC BY 4.0)                                                                //
//                                                                                                //
//====----------------------------------------------------------------------------------------====//
//                                                                                                //
// this is the drop in replacement for the entire Helix compiler, this will be used when          //
// rewriting the compiler in helix itself (self-hosting), the reason this is the entry point is   //
// helix the compiler can now work with the c++ interop modules rather then having to compile     //
// only helix files into c++ headers then include them, instead we can now just use bi-directional//
// ffi to include c++ headers and use them in helix code.                                         //
//                                                                                                //
//====----------------------------------------------------------------------------------------====//


/*
using the new toolchain the entire process can happen like this:
*/
fn foo() -> i32? {
    panic "this is a panic";
    // breaks down to the following c++:
    return PanicFrame(
        "this is a panic",
        "source/helix.hlx",
        1, "foo"
    );
}

fn abc() -> i32 {
    let x = ["hello", "world"];

    // fails to codegen correctly since the `as` requires a primary expr on the right
    return x[0].length() as i32;
    // the really annoying thing is the error message is not helpful at all, it just says
    // "function `length` not found." which is not true. the reason is because the c++ codegen looks
    // like this: `helix::std::as<i32>(x[0]).length()`, which is not correct and the reason it fails.
    //
    // couple of notes about helix:
    // - the language is still in development and is not stable yet.
    // - the language right now has a c++ backend, and the self-hosted compiler would initially also
    //   have a c++ backend. but that would be migrated to a llvm backend later on. (the c++ backend
    //   is just a temporary solution, since llvm is really hard to work with and the c++ backend is
    //   much easier to work with - for now)

    // this is the fix: (looks bad but it's the only way to fix it right now)
    return (x[0].length()) as i32;

    // this is one of many little things that are very finicky in the language but it will be fixed
    // with the self-hosted compiler.
    //
    // the current compiler is very limited in what it can do, but it's a start and does work for the
    // most part, the self-hosted compiler will be able to do much more and be much more flexible.
}

fn helix_compiler(std::array::<std::string, N> args) -> i32
  requires <N: std::size_t> {
    let invoke      = InvocationManager(args, true);
    let compile     = CompilationUnit(invoke);
    let diag_handle = PrettyDiagnosticHandler();

    // frontend processors
    compile.add_frontend_processor(Mem::Heap::<LexicalProcessor>());
    compile.add_frontend_processor(PreProcessor());
    compile.add_frontend_processor(ASTProcessor());

    // backend processors
    compile.add_backend_processor(CXIRGenerator());
    compile.add_backend_processor(ExecutableGenerator<OutputFormat::Executable>());

    // set diagnostics
    compile.set_diagnostic_handler(diag_handle);

    if (compile.execute() != CompilationUnit::Success) {
        switch (compile.exit_state) {
            case CompilationUnit::CompilerError:
                log("compiler internal error: ",
                    diag_handle
                        .get<CompilationUnit::CompilerError>()
                        .format() as string
                ); break;

            case CompilationUnit::CodeError:
                log(
                    "user code error: ",
                    diag_handle
                        .get<CompilationUnit::CodeError>()
                        .format() as string
                ); break;

            case CompilationUnit::UnrecoverableError:
                log(
                    "fatal error: ",
                    diag_handle
                        .get<CompilationUnit::UnrecoverableError>()
                        .format() as string
                ); break;

            case CompilationUnit::SystemError:
                log(
                    "sys call error: ",
                    diag_handle
                        .get<CompilationUnit::SystemError>()
                        .format() as string
                ); break;
        };

        diag_handle.panic(PrettyDiagnosticHandler::ColorMode::ON);
    }

    return 0;
}

/* other.hlx
```helix

import main;

fn run_tests() {
    test main; // runs all tests defined in main.hlx
    test main["this is main.hlx"]; // runs the test with the given name
}

fn main() -> int {
    run_tests();

    // everything else

    return 0;
}

```
*/

