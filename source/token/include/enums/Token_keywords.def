///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------------- C++ ---///

#ifndef __KEYWORDS_DEF__
#define __KEYWORDS_DEF__

#define KEYWORD_TOKENS_COUNT 50

/// Key: Val
/// M  : Modifier
/// S  : Statement
/// D  : Declaration
/// H  : Helper
/// E  : Expression
/// P  : Preprocessor

/* TODO determine if is needs to be removed */

#define KEYWORD_TOKENS(GENERATE)                       \
    /* S */ GENERATE(KEYWORD_IF, "if")                 \
    /* S */ GENERATE(KEYWORD_ELSE, "else")             \
    /* S */ GENERATE(KEYWORD_UNLESS, "unless")         \
    /*---- P ----*/ GENERATE(KEYWORD_MACRO, "macro")   \
    /* D */ GENERATE(KEYWORD_FUNCTION, "fn")           \
    /* D */ GENERATE(KEYWORD_OPERATOR, "op")           \
    /* M */ GENERATE(KEYWORD_INLINE, "inline")         \
    /* M */ GENERATE(KEYWORD_STATIC, "static")         \
    /* S */ GENERATE(KEYWORD_RETURN, "return")         \
    /* M */ GENERATE(KEYWORD_ASYNC, "async")           \
    /* E */ GENERATE(KEYWORD_SPAWN, "spawn")           \
    /* E */ GENERATE(KEYWORD_AWAIT, "await")           \
    /* E */ GENERATE(KEYWORD_THREAD, "thread")         \
    /* S */ GENERATE(KEYWORD_FOR, "for")               \
    /* S */ GENERATE(KEYWORD_WHILE, "while")           \
    /* S */ GENERATE(KEYWORD_BREAK, "break")           \
    /* S */ GENERATE(KEYWORD_CONTINUE, "continue")     \
    /* H */ GENERATE(KEYWORD_CASE, "case")             \
    /* S */ GENERATE(KEYWORD_MATCH, "match")           \
    /* S */ GENERATE(KEYWORD_SWITCH, "switch")         \
    /* H */ GENERATE(KEYWORD_DEFAULT, "default")       \
    /* H */ GENERATE(KEYWORD_ENUM, "enum")             \
    /* D */ GENERATE(KEYWORD_TYPE, "type")             \
    /* M */ GENERATE(KEYWORD_EVAL, "eval")             \
    /* D */ GENERATE(KEYWORD_CLASS, "class")           \
    /* D */ GENERATE(KEYWORD_UNION, "union")           \
    /* D */ GENERATE(KEYWORD_STRUCT, "struct")         \
    /* D */ GENERATE(KEYWORD_INTERFACE, "interface")   \
    /* H */ GENERATE(KEYWORD_HAS, "has")               \
    /* S */ GENERATE(KEYWORD_TRY, "try")               \
    /* S */ GENERATE(KEYWORD_PANIC, "panic")           \
    /* S */ GENERATE(KEYWORD_CATCH, "catch")           \
    /* S */ GENERATE(KEYWORD_FINALLY, "finally")       \
    /* D */ GENERATE(KEYWORD_LET, "let")               \
    /* M */ GENERATE(KEYWORD_PRIVATE, "priv")          \
    /* M */ GENERATE(KEYWORD_PUBLIC, "pub")            \
    /* M */ GENERATE(KEYWORD_PROTECTED, "prot")        \
    /* M */ GENERATE(KEYWORD_INTERNAL, "intl")         \
    /* M */ GENERATE(KEYWORD_CONST, "const")           \
    /*---- S ----*/ GENERATE(KEYWORD_GLOBAL, "global") \
    /* D */ GENERATE(KEYWORD_FFI, "ffi")               \
    /* S */ GENERATE(KEYWORD_IMPORT, "import")         \
    /* S */ GENERATE(KEYWORD_YIELD, "yield")           \
    /* S */ GENERATE(KEYWORD_DELETE, "delete")         \
    /* H */ GENERATE(KEYWORD_AS, "as")                 \
    /* H */ GENERATE(KEYWORD_IN, "in")                 \
    /* H */ GENERATE(KEYWORD_DERIVES, "derives")       \
    /* D */ GENERATE(KEYWORD_MODULE, "module")         \
    /* H */ GENERATE(KEYWORD_REQUIRES, "requires")     \
    /*---- M ----*/ GENERATE(KEYWORD_UNSAFE, "unsafe")

// NOTE: IF THIS GENERATION IS CHANGED DO NOT FORGET TO UPDATE COUNT
// TODO: change 'in' to a operator
#endif  // __KEYWORDS_DEF__