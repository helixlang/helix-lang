//===------------------------------------------ C++ ------------------------------------------====//
//                                                                                                //
//  Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).       //
//  You are allowed to use, modify, redistribute, and create derivative works, even for           //
//  commercial purposes, provided that you give appropriate credit, and indicate if changes       //
//   were made. For more information, please visit: https://creativecommons.org/licenses/by/4.0/  //
//                                                                                                //
//  SPDX-License-Identifier: CC-BY-4.0                                                            //
//  Copyright (c) 2024 (CC BY 4.0)                                                                //
//                                                                                                //
//====----------------------------------------------------------------------------------------====//

#ifndef __CXX_TOKENS_DEF__
#define __CXX_TOKENS_DEF__

// Count should be updated based on actual number of tokens added
#define CXX_TOKENS_COUNT 189  // Update based on total number of tokens

// Macro to generate all C++ tokens, including new C++23 tokens
#define CXX_TOKENS(GENERATE)                              \
    /* C++ Core Tokens */                                 \
    GENERATE(CXX_ALIGNAS,           "alignas"           ) \
    GENERATE(CXX_ALIGNOF,           "alignof"           ) \
    GENERATE(CXX_AND,               "and"               ) \
    GENERATE(CXX_AND_EQ,            "and_eq"            ) \
    GENERATE(CXX_ASM,               "asm"               ) \
    GENERATE(CXX_AUTO,              "auto"              ) \
    GENERATE(CXX_BITAND,            "bitand"            ) \
    GENERATE(CXX_BITOR,             "bitor"             ) \
    GENERATE(CXX_BOOL,              "bool"              ) \
    GENERATE(CXX_BREAK,             "break"             ) \
    GENERATE(CXX_CASE,              "case"              ) \
    GENERATE(CXX_CATCH,             "catch"             ) \
    GENERATE(CXX_CHAR,              "char"              ) \
    GENERATE(CXX_CHAR8_T,           "char8_t"           ) \
    GENERATE(CXX_CHAR16_T,          "char16_t"          ) \
    GENERATE(CXX_CHAR32_T,          "char32_t"          ) \
    GENERATE(CXX_CLASS,             "class"             ) \
    GENERATE(CXX_CONST,             "const"             ) \
    GENERATE(CXX_CONSTEXPR,         "constexpr"         ) \
    GENERATE(CXX_CONST_CAST,        "const_cast"        ) \
    GENERATE(CXX_CONTINUE,          "continue"          ) \
    GENERATE(CXX_CO_AWAIT,          "co_await"          ) \
    GENERATE(CXX_CO_RETURN,         "co_return"         ) \
    GENERATE(CXX_CO_YIELD,          "co_yield"          ) \
    GENERATE(CXX_DECLTYPE,          "decltype"          ) \
    GENERATE(CXX_DEFAULT,           "default"           ) \
    GENERATE(CXX_DELETE,            "delete"            ) \
    GENERATE(CXX_DO,                "do"                ) \
    GENERATE(CXX_DOUBLE,            "double"            ) \
    GENERATE(CXX_DYNAMIC_CAST,      "dynamic_cast"      ) \
    GENERATE(CXX_ELSE,              "else"              ) \
    GENERATE(CXX_ENUM,              "enum"              ) \
    GENERATE(CXX_EXPLICIT,          "explicit"          ) \
    GENERATE(CXX_EXTERN,            "extern"            ) \
    GENERATE(CXX_FALSE,             "false"             ) \
    GENERATE(CXX_FLOAT,             "float"             ) \
    GENERATE(CXX_FOR,               "for"               ) \
    GENERATE(CXX_FRIEND,            "friend"            ) \
    GENERATE(CXX_GOTO,              "goto"              ) \
    GENERATE(CXX_IF,                "if"                ) \
    GENERATE(CXX_INLINE,            "inline"            ) \
    GENERATE(CXX_INT,               "int"               ) \
    GENERATE(CXX_LONG,              "long"              ) \
    GENERATE(CXX_MODULE,            "module"            ) \
    GENERATE(CXX_MUTABLE,           "mutable"           ) \
    GENERATE(CXX_NAMESPACE,         "namespace"         ) \
    GENERATE(CXX_NEW,               "new"               ) \
    GENERATE(CXX_NOEXCEPT,          "noexcept"          ) \
    GENERATE(CXX_NOT,               "not"               ) \
    GENERATE(CXX_NOT_EQ,            "not_eq"            ) \
    GENERATE(CXX_NULLPTR,           "nullptr"           ) \
    GENERATE(CXX_OPERATOR,          "operator"          ) \
    GENERATE(CXX_OR,                "or"                ) \
    GENERATE(CXX_OR_EQ,             "or_eq"             ) \
    GENERATE(CXX_PRIVATE,           "private"           ) \
    GENERATE(CXX_PROTECTED,         "protected"         ) \
    GENERATE(CXX_PUBLIC,            "public"            ) \
    GENERATE(CXX_REGISTER,          "register"          ) \
    GENERATE(CXX_REINTERPRET_CAST,  "reinterpret_cast"  ) \
    GENERATE(CXX_RETURN,            "return"            ) \
    GENERATE(CXX_SHORT,             "short"             ) \
    GENERATE(CXX_SIGNED,            "signed"            ) \
    GENERATE(CXX_SIZEOF,            "sizeof"            ) \
    GENERATE(CXX_STATIC,            "static"            ) \
    GENERATE(CXX_STATIC_ASSERT,     "static_assert"     ) \
    GENERATE(CXX_STATIC_CAST,       "static_cast"       ) \
    GENERATE(CXX_STRUCT,            "struct"            ) \
    GENERATE(CXX_SWITCH,            "switch"            ) \
    GENERATE(CXX_TEMPLATE,          "template"          ) \
    GENERATE(CXX_THIS,              "this"              ) \
    GENERATE(CXX_THREAD_LOCAL,      "thread_local"      ) \
    GENERATE(CXX_THROW,             "throw"             ) \
    GENERATE(CXX_TRUE,              "true"              ) \
    GENERATE(CXX_TRY,               "try"               ) \
    GENERATE(CXX_TYPEDEF,           "typedef"           ) \
    GENERATE(CXX_TYPEID,            "typeid"            ) \
    GENERATE(CXX_TYPENAME,          "typename"          ) \
    GENERATE(CXX_UNION,             "union"             ) \
    GENERATE(CXX_UNSIGNED,          "unsigned"          ) \
    GENERATE(CXX_USING,             "using"             ) \
    GENERATE(CXX_VIRTUAL,           "virtual"           ) \
    GENERATE(CXX_VOID,              "void"              ) \
    GENERATE(CXX_VOLATILE,          "volatile"          ) \
    GENERATE(CXX_WCHAR_T,           "wchar_t"           ) \
    GENERATE(CXX_WHILE,             "while"             ) \
    GENERATE(CXX_XOR,               "xor"               ) \
    GENERATE(CXX_XOR_EQ,            "xor_eq"            ) \
    /* New C++20 and C++23 keywords */                    \
    GENERATE(CXX_CONCEPT,           "concept"           ) \
    GENERATE(CXX_CONSTINIT,         "constinit"         ) \
    GENERATE(CXX_CONSTEVAL,         "consteval"         ) \
    GENERATE(CXX_REQUIRES,          "requires"          ) \
    GENERATE(CXX_LAMBDA,            "lambda"            ) \
    GENERATE(CXX_IMPORT,            "import"            ) \
    GENERATE(CXX_EXPORT,            "export"            ) \
    GENERATE(CXX_REFLEXPR,          "reflexpr"          ) \
    GENERATE(CXX_DEDUCTION_GUIDE,   "deduction_guide"   ) \
    GENERATE(CXX_OPERATOR_COALESCE, "??"                ) \
    GENERATE(CXX_SPACESHIP,         "<=>"               ) \
    /* core tokens */                                     \
    GENERATE(CXX_CORE_OPERATOR,     "/* operator */"    ) \
    GENERATE(CXX_CORE_LITERAL,      "/* literal */"     ) \
    GENERATE(CXX_CORE_IDENTIFIER,   "/* identifier */"  ) \
    GENERATE(CXX_CORE_PUNCTUATION,  "/* punctuation */" ) \
    /* preprocessor */                                    \
    GENERATE(CXX_PP_DEFINE,         "#define"           ) \
    GENERATE(CXX_PP_INCLUDE,        "#include"          ) \
    GENERATE(CXX_PP_IFDEF,          "#ifdef"            ) \
    GENERATE(CXX_PP_IFNDEF,         "#ifndef"           ) \
    GENERATE(CXX_PP_ELIF,           "#elif"             ) \
    GENERATE(CXX_PP_ELSE,           "#else"             ) \
    GENERATE(CXX_PP_ENDIF,          "#endif"            ) \
    GENERATE(CXX_PP_UNDEF,          "#undef"            ) \
    GENERATE(CXX_PP_LINE,           "#line"             ) \
    GENERATE(CXX_PP_ERROR,          "#error"            ) \
    GENERATE(CXX_PP_PRAGMA,         "#pragma"           ) \
    /* helix_prims c++ rep */                             \
    GENERATE(HELIX_I8,              "char"              ) \
    GENERATE(HELIX_I16,             "short"             ) \
    GENERATE(HELIX_I32,             "int"               ) \
    GENERATE(HELIX_I64,             "long"              ) \
    GENERATE(HELIX_UI128,           "long long"         ) \
    GENERATE(HELIX_U8,              "unsigned char"     ) \
    GENERATE(HELIX_U16,             "unsigned short"    ) \
    GENERATE(HELIX_U32,             "unsigned int"      ) \
    GENERATE(HELIX_U64,             "unsigned long"     ) \
    GENERATE(HELIX_U128,            "unsigned long long") \
    GENERATE(HELIX_F32,             "float"             ) \
    GENERATE(HELIX_F64,             "double"            ) \
    GENERATE(HELIX_F128,            "long double"       ) \
    GENERATE(HELIX_BOOL,            "bool"              ) \
    GENERATE(HELIX_VOID,            "void"              ) \
    GENERATE(HELIX_CHAR,            "char"              ) \
    /* punctuation */                                    \
    GENERATE(CXX_LPAREN,            "("                 ) \
    GENERATE(CXX_RPAREN,            ")"                 ) \
    GENERATE(CXX_LBRACE,            "{"                 ) \
    GENERATE(CXX_RBRACE,            "}"                 ) \
    GENERATE(CXX_LBRACKET,          "["                 ) \
    GENERATE(CXX_RBRACKET,          "]"                 ) \
    GENERATE(CXX_COMMA,             ","                 ) \
    GENERATE(CXX_COLON,             ":"                 ) \
    GENERATE(CXX_SEMICOLON,         ";"                 ) \
    GENERATE(CXX_DOT,               "."                 ) \
    GENERATE(CXX_ELLIPSIS,          "..."               ) \
    GENERATE(CXX_QUESTION,          "?"                 ) \
    GENERATE(CXX_TILDE,             "~"                 ) \
    GENERATE(CXX_EXCLAMATION,       "!"                 ) \
    GENERATE(CXX_AT,                "@"                 ) \
    GENERATE(CXX_HASH,              "#"                 ) \
    GENERATE(CXX_DOLLAR,            "$"                 ) \
    GENERATE(CXX_PERCENT,           "%"                 ) \
    GENERATE(CXX_CARET,             "^"                 ) \
    GENERATE(CXX_AMPERSAND,         "&"                 ) \
    GENERATE(CXX_ASTERISK,          "*"                 ) \
    GENERATE(CXX_MINUS,             "-"                 ) \
    GENERATE(CXX_PLUS,              "+"                 ) \
    GENERATE(CXX_EQUAL,             "="                 ) \
    GENERATE(CXX_PIPE,              "|"                 ) \
    GENERATE(CXX_SLASH,             "/"                 ) \
    GENERATE(CXX_BACKSLASH,         "\\"                ) \
    GENERATE(CXX_LESS,              "<"                 ) \
    GENERATE(CXX_GREATER,           ">"                 ) \
    GENERATE(CXX_UNDERSCORE,        "_"                 ) \
    GENERATE(CXX_DOUBLE_QUOTE,      "\""                ) \
    GENERATE(CXX_SINGLE_QUOTE,      "'"                 ) \
    GENERATE(CXX_BACKTICK,          "`"                 ) \
    GENERATE(CXX_SPACE,             " "                 ) \
    GENERATE(CXX_NEWLINE,           "\n"                ) \
    GENERATE(CXX_PTR_ACC,           "->"                ) \ 
    GENERATE(CXX_PTR_REF,           ".*"                ) \ 
    GENERATE(CXX_INC,               "++"                ) \ 
    GENERATE(CXX_DEC,               "--"                ) \ 
    GENERATE(CXX_LOGICAL_AND,       "&&"                ) \ 
    GENERATE(CXX_LOGICAL_OR,        "||"                ) \ 
    GENERATE(CXX_LEFT_SHIFT,        "<<"                ) \ 
    GENERATE(CXX_RIGHT_SHIFT,       ">>"                ) \ 
    GENERATE(CXX_EQUAL_TO,          "=="                ) \ 
    GENERATE(CXX_NOT_EQUAL_TO,      "!="                ) \ 
    GENERATE(CXX_LESS_THAN,         "<"                 ) \ 
    GENERATE(CXX_LESS_THAN_EQUAL,   "<="                ) \ 
    GENERATE(CXX_GREATER_THAN,      ">"                 ) \ 
    GENERATE(CXX_GREATER_THAN_EQUAL,">="                ) \ 
    GENERATE(CXX_ASSIGN,            "="                 ) \ 
    GENERATE(CXX_ADD_ASSIGN,        "+="                ) \ 
    GENERATE(CXX_SUB_ASSIGN,        "-="                ) \ 
    GENERATE(CXX_MUL_ASSIGN,        "*="                ) \ 
    GENERATE(CXX_DIV_ASSIGN,        "/="                ) \ 
    GENERATE(CXX_MOD_ASSIGN,        "%="                ) \ 
    GENERATE(CXX_LEFT_SHIFT_ASSIGN, "<<="               ) \ 
    GENERATE(CXX_RIGHT_SHIFT_ASSIGN,">>="               ) \ 
    GENERATE(CXX_AND_ASSIGN,        "&="                ) \ 
    GENERATE(CXX_OR_ASSIGN,         "|="                ) \ 
    GENERATE(CXX_XOR_ASSIGN,        "^="                )  



    


// NOTE: IF THIS GENERATION IS CHANGED DO NOT FORGET TO UPDATE COUNT

#endif  // __CXX_TOKENS_DEF__