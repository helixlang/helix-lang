///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------------- C++ ---///

#ifndef __CODEGEN_CONFIG_DEF__
#define __CODEGEN_CONFIG_DEF__

#define __CXIR_CODEGEN_BEGIN namespace generator::CXIR

#define __CXIR_CODEGEN_N generator::CXIR

#define CX_VISIT_IMPL(type) \
    void __CXIR_CODEGEN_N::CXIR::visit(const __AST_NODE::type &node /* NOLINT */)
#define CX_VISIT_IMPL_VA(type, ...) \
    void __CXIR_CODEGEN_N::CXIR::visit(const __AST_NODE::type &node /* NOLINT */, __VA_ARGS__)

#define MAKE_CXIR_TOKEN(name, string) name,
#define MAKE_CXIR_TOKEN_PAIR(name, string) std::pair{name, string},

// The enum inside of the struct removes the naming conflict with the token classes.
#define GENERATE_CXIR_TOKENS_ENUM_AND_MAPPING                                    \
    __CXIR_CODEGEN_BEGIN {                                                       \
        enum cxir_tokens { CXX_TOKENS(MAKE_CXIR_TOKEN) };                        \
                                                                                 \
        constexpr token::Mapping<cxir_tokens, CXX_TOKENS_COUNT> cxir_tokens_map{ \
            {CXX_TOKENS(MAKE_CXIR_TOKEN_PAIR)}};                                 \
    }

#define CODEGEN_ERROR(tok, msg)                                                     \
    error::Panic(error::CodeError{.pof      = const_cast<__TOKEN_N::Token *>(&tok), \
                                  .err_code = 0.0001,                               \
                                  .mark_pof = true,                                 \
                                  .fix_fmt_args{},                                  \
                                  .err_fmt_args{GET_DEBUG_INFO + msg},              \
                                  .opt_fixes{}});

#define CXIR_NOT_IMPLEMENTED throw std::runtime_error(GET_DEBUG_INFO + "Not implemented yet")
#define ADD_TOKEN(token) tokens.push_back(std::make_unique<CX_Token>(cxir_tokens::token))
#define ADD_TOKEN_AS_VALUE(token, value) \
    tokens.push_back(std::make_unique<CX_Token>(cxir_tokens::token, value))
#define ADD_TOKEN_AS_TOKEN(token, token_value) \
    tokens.push_back(std::make_unique<CX_Token>(token_value, cxir_tokens::token))

#define ADD_NODE_PARAM(param)  \
    if (node.param != nullptr) \
    ADD_PARAM(node.param)
#define ADD_PARAM(param) param->accept(*this)

#define NO_EMIT_FORWARD_DECL  \
    if (this->forward_only) { \
        return;               \
    }

#define NO_EMIT_FORWARD_DECL_SEMICOLON \
    if (this->forward_only) {          \
        ADD_TOKEN(CXX_SEMICOLON);      \
        return;                        \
    }

// This macro will not add a separator after the last element.
#define SEP(args, sep)                                  \
    if (!node.args.empty()) {                           \
        ADD_NODE_PARAM(args[0]);                        \
        for (size_t i = 1; i < node.args.size(); ++i) { \
            sep;                                        \
            ADD_NODE_PARAM(args[i]);                    \
        }                                               \
    }

// This macro always adds the separator, even after the last element.
#define SEP_TRAILING(args, sep)                         \
    if (!node.args.empty())                             \
        for (size_t i = 0; i < node.args.size(); ++i) { \
            ADD_NODE_PARAM(args[i]);                    \
            sep                                         \
        }

#define UNLESS_NULL(x) (node.x) if (node.x != nullptr)

#define ADD_ALL_PARAMS(params)         \
    for (const auto &param : params) { \
        ADD_PARAM(param);              \
    }

#define ADD_ALL_NODE_PARAMS(params) ADD_ALL_PARAMS(node.params)

#define COMMA_SEP(args) SEP(args, ADD_TOKEN_AS_VALUE(CXX_CORE_OPERATOR, ",");)
#define SCOPE_SEP(args) SEP(args, ADD_TOKEN_AS_VALUE(CXX_CORE_OPERATOR, "::");)

#define DELIMIT(L, R, ...) \
    ADD_TOKEN(L);          \
    __VA_ARGS__            \
    ADD_TOKEN(R)

#define PAREN_DELIMIT(...) DELIMIT(CXX_LPAREN, CXX_RPAREN, __VA_ARGS__)
#define BRACE_DELIMIT(...) DELIMIT(CXX_LBRACE, CXX_RBRACE, __VA_ARGS__)
#define BRACKET_DELIMIT(...) DELIMIT(CXX_LBRACKET, CXX_RBRACKET, __VA_ARGS__)
#define ANGLE_DELIMIT(...) DELIMIT(CXX_LESS, CXX_GREATER, __VA_ARGS__)

#endif  // __CODEGEN_CONFIG_DEF__