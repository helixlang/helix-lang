///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------------- C++ ---///

#ifndef __CODEGEN_CONFIG_DEF__
#define __CODEGEN_CONFIG_DEF__

#define __CXIR_CODEGEN_BEGIN namespace generator::CXIR

#define __CXIR_CODEGEN_N generator::CXIR

#define CX_VISIT_IMPL(type) \
    void __CXIR_CODEGEN_N::CXIR::visit(const __AST_NODE::type &node /* NOLINT */)
#define CX_VISIT_IMPL_VA(type, ...) \
    void __CXIR_CODEGEN_N::CXIR::visit(const __AST_NODE::type &node /* NOLINT */, __VA_ARGS__)

#define MAKE_CXIR_TOKEN(name, string) name,
#define MAKE_CXIR_TOKEN_PAIR(name, string) std::pair{name, string},

// The enum inside of the struct removes the naming conflict with the token classes.
#define GENERATE_CXIR_TOKENS_ENUM_AND_MAPPING                                    \
    __CXIR_CODEGEN_BEGIN {                                                       \
        enum cxir_tokens { CXX_TOKENS(MAKE_CXIR_TOKEN) };                        \
                                                                                 \
        constexpr token::Mapping<cxir_tokens, CXX_TOKENS_COUNT> cxir_tokens_map{ \
            {CXX_TOKENS(MAKE_CXIR_TOKEN_PAIR)}};                                 \
    }

#define CODEGEN_ERROR(tok, msg)                                                     \
    error::Panic(error::CodeError{.pof      = const_cast<__TOKEN_N::Token *>(&tok), \
                                  .err_code = 0.0001,                               \
                                  .mark_pof = true,                                 \
                                  .fix_fmt_args{},                                  \
                                  .err_fmt_args{GET_DEBUG_INFO + msg},              \
                                  .opt_fixes{}});

#endif  // __CODEGEN_CONFIG_DEF__