///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///-------------------------------------------------------------------------------------- C++ ---///

#include <filesystem>
#include <fstream>
#include <memory>
#include <vector>

#include "controller/include/Controller.hh"
#include "controller/include/shared/logger.hh"
#include "generator/include/CX-IR/CXIR.hh"
#include "generator/include/config/Gen_config.def"

std::string read_core_lib() {
    std::filesystem::path core_lib = std::filesystem::path(__FILE__).parent_path() / "core_lib.hh";
    std::ifstream         file(core_lib);

    if (!file.is_open()) {
        return "";
    }

    std::string core_lib_str((std::istreambuf_iterator<char>(file)),
                             std::istreambuf_iterator<char>());

    return std::string(core_lib_str);
}

// TODO, do we want to add c++ includes or just read the files and paste them instead?
std::vector<std::string>
read_core_includes(const std::filesystem::path &core_dir =
                       __CONTROLLER_FS_N::get_exe().parent_path().parent_path() / "core") {
    std::vector<std::string> includes;

    if (!std::filesystem::exists(core_dir)) {
        helix::log<LogLevel::Warning>("core directory does not exist: \'" +
                                      core_dir.generic_string() + "\'");
        return includes;
    }

    // find all .h files in the core directory
    // read the file and format them as so:
    // #line 1 "file.h"
    // ... file.h content ...
    for (const auto &entry : std::filesystem::directory_iterator(core_dir)) {
        if (entry.is_regular_file() && entry.path().extension() == ".h") {
            std::ifstream file(entry.path());
            std::string   line;
            std::string   include;

            include += "#line 1 \"" + entry.path().filename().string() + "\"\n";

            while (std::getline(file, line)) {
                include += line + "\n";
            }

            includes.push_back(include);
        }
    }

    return includes;
}

std::string __CXIR_CODEGEN_N::CXIR::get_core() {
    std::string start =
        R"(#ifndef __HELIX_CORE_CXX__
#define __HELIX_CORE_CXX__
///*--- Helix ---*
///
///  Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).
///  You are allowed to use, modify, redistribute, and create derivative works, even for
///  commercial purposes, provided that you give appropriate credit, and indicate if changes
///  were made. For more information, please visit: https://creativecommons.org/licenses/by/4.0/
///
///  SPDX-License-Identifier: CC-BY-4.0
///  Copyright (c) 2024 (CC BY 4.0)
///
///  This file was generated by the Helix compiler, do not modify it directly.
///  Generated on: )" +
        std::to_string(std::chrono::system_clock::to_time_t(std::chrono::system_clock::now())) +
        R"( [unix-timestamp]
///
///*--- Helix ---*

#if __cplusplus < 202002L
static_assert(false, "helix requires c++20 or higher");
#endif

)";
    // auto includes = read_core_includes();

    // if (!includes.empty()) {
    //     for (std::string &include : includes) {
    //         start += include + "\n";
    //     }
    // }

    return start + read_core_lib() + R"(
#endif
)";
}
