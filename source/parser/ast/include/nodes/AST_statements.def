//===------------------------------------------ C++ ------------------------------------------====//
//                                                                                                //
//  Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).       //
//  You are allowed to use, modify, redistribute, and create derivative works, even for           //
//  commercial purposes, provided that you give appropriate credit, and indicate if changes       //
//   were made. For more information, please visit: https://creativecommons.org/licenses/by/4.0/  //
//                                                                                                //
//  SPDX-License-Identifier: CC-BY-4.0                                                            //
//  Copyright (c) 2024 (CC BY 4.0)                                                                //
//                                                                                                //
//====----------------------------------------------------------------------------------------====//
//                                                                                                //
//  @author @mbambav                                                                              //
//  @brief  This file defines the AST Statements Parser, which is used to parse statements in the //
//                                                                                                //
//===-----------------------------------------------------------------------------------------====//

#ifndef __AST_STATEMENTS_DEF__
#define __AST_STATEMENTS_DEF__


namespace parser::ast {
    enum class AccessSpecifier {
        Public,    ///< 'pub'
        Private,   ///< 'priv'
        Protected, ///< 'prot'
        Internal   ///< 'internal'
    };
}

#define STATEMENTS(GENERATE, DERIVE)  \
    GENERATE(Assignment, DERIVE,      \
        NodeT<Identifier> name;       \
        NodeT<Expression> value;      \
    )                                 \
                                      \
    GENERATE(ForLoop, DERIVE,         \
        NodeT<> initialization;       \
        NodeT<Expression> condition;  \
        NodeT<Expression> incrementor;\
        NodeT<Suite> body;            \
    )                                 \
                                      \
    GENERATE(RangeLoop, DERIVE,       \
        NodeT<Expression> variable;   \
        NodeT<Expression> iterable;   \
        NodeT<Suite> body;            \
    )                                 \
                                      \
    GENERATE(WhileLoop, DERIVE,       \
        NodeT<Expression> condition;  \
        NodeT<Suite> body;            \
    )                                 \
                                      \
    GENERATE(IfStatement, DERIVE,     \
        NodeT<Expression> condition;  \
        NodeT<Suite> body;            \
    )                                 \
                                      \
    GENERATE(ElseIfStatement, DERIVE, \
        NodeT<Expression> condition;  \
        NodeT<Suite> body;            \
    )                                 \
                                      \
    GENERATE(ElseStatement, DERIVE,   \
        NodeT<Suite> body;            \
    )                                 \
                                      \
                                      \
    GENERATE(ConditionalStatement, DERIVE,          \
        NodeT<IfStatement> if_statement;            \
        NodeT<ElseIfStatement> else_if_statement;   \
        NodeT<ElseStatement> else_statement;        \
    )                                               \
                                                    \
    GENERATE(ReturnStatement, DERIVE,               \
        NodeT<Expression> value;                    \
    )                                               \
                                                    \
    GENERATE(ContinueStatement, DERIVE,             \
        bool is_true = true;                        \
    )                                               \
                                                    \
    GENERATE(BreakStatement, DERIVE,                \
        bool is_true = true;                        \
    )                                               \
                                                    \
    GENERATE(YieldStatement, DERIVE,                \
        NodeT<Expression> value;                    \
    )


#endif // __AST_STATEMENTS_DEF__

/* TODO: add in v0.0.4
GENERATE(SwitchStatement, DERIVE,               \
    NodeT<Expression> variable;                 \
                                                \
)                                               \
GENERATE(CaseStatement, DERIVE,                 \
    NodeT<Expression> _case;                     \
    NodeT<> body;                               \
)                                               \
GENERATE(DefaultCaseStatement, DERIVE,          \
    NodeT<> body;                               \
)                                               \
GENERATE(MatchExpression, DERIVE,               \
    NodeT<CaseStatement> _case;                  \
)                                               \
*/