
/* Main Program Structure */

Program          ::= (ImportStatement | PreprocessorDirective | VariableDeclaration | FunctionDefinition | Statement)*

/* Module Importing */

ImportStatement ::= 'import' QualifiedNamespaceID ('::' '{' (QualifiedNamespaceID (',' QualifiedNamespaceID)*) '}')? ('as' QualifiedNamespaceID)? ';'

FFIImportStatement ::= 'ffi' String ImportStatement

/* Preprocessor Directives */

PreprocessorDirective ::= DefineMacro | ProcMacro

DefineMacro     ::= 'define' Identifier ('(' (UntypedParameter (',' UntypedParameter)*)? ')')? Suite ';'

ProcMacro       ::= 'macro' Identifier '(' (UntypedParameter (',' UntypedParameter)*)? ')' '->' Type '{' (Statement | Expression) '}' ';'

/* Control Flow */

ForLoop ::= 'for' '(' (CStyleForLoop | PyStyleForLoop) ')' | (CStyleForLoop | PyStyleForLoop) Suite

CStyleForLoop  ::= (VariableDeclaration | Expression?) ';' Expression? ';' Expression?

PyStyleForLoop ::= AnySeparatedID 'in' Expression

WhileLoop ::= 'while' Expression Suite

IfStatement ::= 'if' Expression Suite

UnlessStatement ::= 'unless' Expression Suite

ElseIfStatement ::= 'else' 'if' Expression Suite

ElseStatement ::= 'else' Suite

ContinueStatement ::= 'continue'

BreakStatement ::= 'break'

SwitchStatement ::= 'switch' '{' ((('case' Expression) | 'default') Suite)* '}'

MatchExpression ::= 'match' '{' ((Expression | '_') '->' (CodeBlock | (':' Expression)) (',' (Expression | '_') '->' (CodeBlock | (':' Expression)))*) '}'

/* Functions and Methods */

FunctionDefinition ::= AccessModifiers? (('fn' QualifiedNamespaceID '(' (TypedParameter (',' TypedParameter)*)? (DefaultArgument (',' DefaultArgument)*)? ')' ('->' Type)?
                      | 'inline' ('static' | 'const')? 'fn' QualifiedNamespaceID '(' (TypedParameter (',' TypedParameter)*)? (DefaultArgument (',' DefaultArgument)*)? ')' ('->' Type)?
                      | 'async' 'fn' QualifiedNamespaceID '(' (TypedParameter (',' TypedParameter)*)? (DefaultArgument (',' DefaultArgument)*)? ')' ('->' Type)?
                      | 'static' 'fn' QualifiedNamespaceID '(' (TypedParameter (',' TypedParameter)*)? (DefaultArgument (',' DefaultArgument)*)? ')' ('->' Type)?
                      | 'const' 'fn' QualifiedNamespaceID '(' (TypedParameter (',' TypedParameter)*)? (DefaultArgument (',' DefaultArgument)*)? ')' ('->' Type)?
                      | 'ffi' String 'fn' QualifiedNamespaceID '(' (TypedParameter (',' TypedParameter)*)? (DefaultArgument (',' DefaultArgument)*)? ')' ('->' Type)?) GenericDeclaration? (Suite | ';'))

OperatorDefinition ::= 'op' Operator 'as' QualifiedNamespaceID '(' (TypedParameter (',' TypedParameter)*)? (DefaultArgument (',' DefaultArgument)*)? ')' ('->' Type)? (Suite | ';')

ReturnExpression ::= 'return' (Expression)? ';'

YieldExpression ::= 'yield' (Expression)? ';'

/* Variable Declarations */

VariableDeclaration ::= AccessModifiers? (('let' | 'shared') ((UntypedParameter '=' Expression) | (TypedParameter ('=' Expression)? )) ';'
                      | 'shared'? 'const' TypedParameter '=' Expression ';')

/* Type Definitions */

GenericAccess    ::= '<' (QualifiedNamespaceID (',' QualifiedNamespaceID)*)? '>'

GenericDeclaration ::= 'requires' ((TypeBound (',' TypeBound)*) | ('const' TypedParameter ('=' Expression)?))

TypeBound          ::= ('<' (UntypedParameter | (UntypedParameter (',' UntypedParameter)*)) '>')
                       ('if' QualifiedNamespaceID GenericAccess? ('+' QualifiedNamespaceID GenericAccess?)*)?
                       ('=' Type)?

TupleType        ::= '(' (Type (',' Type)*) ')'

Type             ::= ('int' | 'float' | 'decimal' | 'string' | 'char' | 'bool'
                   | 'list' GenericAccess | 'map' GenericAccess | 'set' GenericAccess
                   | 'tuple' GenericAccess | 'void'
                   | 'i8' | 'i16' | 'i32' | 'i64' | 'i128'
                   | 'u8' | 'u16' | 'u32' | 'u64' | 'u128'
                   | 'f32' | 'f64' | QualifiedNamespaceID GenericAccess?) | TupleType (('*' | '&')? ('?'))?

/* Operators */

Operator         ::= '+'   | '-'   | '*'   | '/'   | '%'   | '@'   | '&'
                   | '^'   | '~'   | '='   | '!'   | '**'  | '+-'  | '<<'
                   | '~&'  | '>>'  | '~|'  | '=='  | '!='  | '>='  | '++'
                   | '--'  | '<='  | '+='  | '-='  | '*='  | '&='  | '|='
                   | '~|'  | '^='  | '~='  | '/='  | '%='  | '@='  | '&&'
                   | '!&'  | '||'  | '!|'  | '^^'  | '..'  | '->'  | '~='
                   | '|'   | '::'  | '===' | '**=' | '&&=' | '!&=' | '||='
                   | '!|=' | '^^=' | '~&=' | '<<=' | '>>=' | '..=' | [^a-zA-Z0-9_]+

/* Expressions */

Expression       ::= Literal | AnySeparatedID | BinaryOperation | UnaryOperation | FunctionCall | ParenthesizedExpression | ArrayAccess | ObjectAccess | ConditionalExpression

BinaryOperation  ::= Expression Operator Expression

UnaryOperation   ::= Operator Expression

FunctionCall     ::= AnySeparatedID GenericAccess? '(' (Expression (',' Expression)*)? ')'

ParenthesizedExpression ::= '(' Expression ')'

ArrayAccess     ::= AnySeparatedID '[' Expression ']'

ObjectAccess    ::= AnySeparatedID '.' Identifier

ConditionalExpression ::= Expression '?' Expression ':' Expression

/* Statements */

Assignment       ::= AnySeparatedID '=' Expression ';'

Statement        ::= VariableDeclaration | Assignment | Expression ';' | ControlFlowStatement | ReturnExpression | YieldExpression | BlockStatement

ControlFlowStatement ::= ForLoop | WhileLoop | IfStatement | UnlessStatement | ElseIfStatement | ElseStatement | ContinueStatement | BreakStatement | SwitchStatement | MatchExpression

BlockStatement ::= Suite

Statements       ::= Statement*

/* Code Structure */

CodeBlock ::= '{' (Statements | Expressions) '}'

CodeLine ::= ':' (Statement | Expression) ';'

Suite ::= CodeLine | CodeBlock

TypedParameter   ::= Identifier ':' Type

UntypedParameter ::= Identifier

AccessModifiers ::= 'priv' | 'pub' | 'prot' | 'intl'

QualifiedNamespaceID ::= Identifier ('::' Identifier)*

DotSeparatedID   ::= Identifier ('.' Identifier)*

AnySeparatedID   ::= (DotSeparatedID | QualifiedNamespaceID) (DotSeparatedID | QualifiedNamespaceID)*

/* Base Elements */

Literal          ::= Number | String | 'true' | 'false' | 'null' | 'nullptr'

Number           ::= Digit+ ('.' Digit+)?

String           ::= '"' [^"]* '"' | "'" [^']* "'"

Identifier       ::= [A-Za-z_][A-Za-z0-9_]*

Digit            ::= [0-9]

/* Default Argument */

DefaultArgument  ::= TypedParameter '=' Expression
