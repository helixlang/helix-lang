# This file was automatically generated by the Helix transpiler
# Do not modify this file, as it will be overwritten

# License: CC0 1.0 Universal
# SPDX-License-Identifier: CC0-1.0

import os, sys
sys.path.append(os.path.dirname(os.path.realpath("c:\\Users\\dhruv\\Documents\\Projects\\helix\\helix.py")))
sys.path.append(os.path.dirname(os.path.realpath(os.getcwd())))
from include.core import *

from include.core import __import_c__


import types
import functools


@hx__multi_method
def main():
    print ( a_cursed_fucntion ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) is a_cursed_fucntion ( ) ( ) ( ) ( ) )
    print ( a_cursed_fucntion ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) )
    print ( a_cursed_fucntion ( ) ( ) ( ) ( ) ( ) ( ) ( ) )
    print ( a_cursed_fucntion ( ) ( ) ( ) ( ) ( ) ( ) )
    print ( a_cursed_fucntion ( ) ( ) ( ) ( ) ( ) )
    print ( a_cursed_fucntion ( ) ( ) ( ) ( ) )
    print ( a_cursed_fucntion ( ) ( ) ( ) )
    print ( a_cursed_fucntion ( ) ( ) )
    print ( a_cursed_fucntion ( ) )
    print ( a_cursed_fucntion )


@hx__multi_method
def a_cursed_fucntion() -> FunctionType:
    return a_cursed_fucntion


@hx__async
def do_something():
    for i in C_For(i = hx_int(0)).set_con('i < 10').set_inc('i ++'):
        print ( "doing something: %d" , i )


@hx__multi_method
def test_int():
    try:
        a: hx_int = hx_int(21)
    except DispatchError:
        panic(TypeError(f"Method 'hx_int' expects, '{str(tuple(hx_int.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    try:
        b: hx_int = hx_int(42)
    except DispatchError:
        panic(TypeError(f"Method 'hx_int' expects, '{str(tuple(hx_int.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    printf ( "just adding: %d" , a + b )
    try:
        a : hx_int = hx_int(42)
    except AttributeError:
        a  = 42
        print("WARN: \"a \" does not contain the attribute '__set__' falling back to default assignment.")

    printf ( "a is now: %d" , a )


@hx__multi_method
def test_float():
    try:
        a: hx_float = hx_float(1)
    except DispatchError:
        panic(TypeError(f"Method 'hx_float' expects, '{str(tuple(hx_float.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    try:
        b: hx_float = hx_float(7)
    except DispatchError:
        panic(TypeError(f"Method 'hx_float' expects, '{str(tuple(hx_float.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    print ( "a / b is" , a / b )


@hx__multi_method
def test_double():
    try:
        a: double = double(1.0)
    except DispatchError:
        panic(TypeError(f"Method 'double' expects, '{str(tuple(double.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    try:
        b: double = double(7.0)
    except DispatchError:
        panic(TypeError(f"Method 'double' expects, '{str(tuple(double.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    print ( "a / b is" , a / b )


@hx__multi_method
def test_char():
    try:
        a: hx_char = hx_char('a')
    except DispatchError:
        panic(TypeError(f"Method 'hx_char' expects, '{str(tuple(hx_char.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    try:
        b: hx_char = hx_char('b')
    except DispatchError:
        panic(TypeError(f"Method 'hx_char' expects, '{str(tuple(hx_char.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    print ( "a + b is" , a + b )


@hx__multi_method
def test_string():
    try:
        a: hx_string = hx_string("hello")
    except DispatchError:
        panic(TypeError(f"Method 'hx_string' expects, '{str(tuple(hx_string.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    try:
        b: hx_string = hx_string("world")
    except DispatchError:
        panic(TypeError(f"Method 'hx_string' expects, '{str(tuple(hx_string.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    print ( "a + b is" , a + b )


@hx__multi_method
def test_bool():
    try:
        a: hx_bool = hx_bool(True)
    except DispatchError:
        panic(TypeError(f"Method 'hx_bool' expects, '{str(tuple(hx_bool.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    try:
        b: hx_bool = hx_bool(False)
    except DispatchError:
        panic(TypeError(f"Method 'hx_bool' expects, '{str(tuple(hx_bool.__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    print ( "a and b is" , a and b )
    print ( "a or b is" , a or b )
    print ( "not a is" , not a )


@hx__multi_method
def test_list():
    try:
        a: hx_list[hx_int] = hx_list([ 1 , 2 , 3 ]).__set_generic__("[hx_int]")
    except DispatchError:
        panic(TypeError(f"Method 'hx_list[hx_int]' expects, '{str(tuple(hx_list[hx_int].__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    try:
        b: hx_list[hx_int] = hx_list([ 4 , 5 , 6 ]).__set_generic__("[hx_int]")
    except DispatchError:
        panic(TypeError(f"Method 'hx_list[hx_int]' expects, '{str(tuple(hx_list[hx_int].__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    print ( "list a is" , a )
    exit ( )


@hx__multi_method
def test_tuple():
    try:
        a: hx_tuple[hx_int] = hx_tuple(( 1 , 2 , 3 )).__set_generic__("[hx_int]")
    except DispatchError:
        panic(TypeError(f"Method 'hx_tuple[hx_int]' expects, '{str(tuple(hx_tuple[hx_int].__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    try:
        b: hx_tuple[hx_int] = hx_tuple(( 4 , 5 , 6 )).__set_generic__("[hx_int]")
    except DispatchError:
        panic(TypeError(f"Method 'hx_tuple[hx_int]' expects, '{str(tuple(hx_tuple[hx_int].__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    print ( "a + b is" , a + b )


@hx__multi_method
def test_map():
    try:
        a: hx_map[hx_string, hx_int] = hx_map({ "a" : 1 , "b" : 2 , "c" : 3 }).__set_generic__("[hx_string, hx_int]")
    except DispatchError:
        panic(TypeError(f"Method 'hx_map[hx_string, hx_int]' expects, '{str(tuple(hx_map[hx_string, hx_int].__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    try:
        b: hx_map[hx_string, hx_int] = hx_map({ "d" : 4 , "e" : 5 , "f" : 6 }).__set_generic__("[hx_string, hx_int]")
    except DispatchError:
        panic(TypeError(f"Method 'hx_map[hx_string, hx_int]' expects, '{str(tuple(hx_map[hx_string, hx_int].__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    print ( "a + b is" , a + b )


@hx__multi_method
def test_set():
    try:
        a: hx_set[hx_int] = hx_set({ 1 , 2 , 3 }).__set_generic__("[hx_int]")
    except DispatchError:
        panic(TypeError(f"Method 'hx_set[hx_int]' expects, '{str(tuple(hx_set[hx_int].__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    try:
        b: hx_set[hx_int] = hx_set({ 4 , 5 , 6 }).__set_generic__("[hx_int]")
    except DispatchError:
        panic(TypeError(f"Method 'hx_set[hx_int]' expects, '{str(tuple(hx_set[hx_int].__annotations__.values())[-1]).replace('|', 'or')}', got something else."), ':', file=inspect.stack()[0].filename, line_no=inspect.stack()[0].lineno-8)

    print ( "a + b is" , a + b )

if __name__ == '__main__':
    try:
        main(hx_list(["syntax\\test.hlx"]).__set_generic__("[str]"))
    except DispatchError:
        main()
