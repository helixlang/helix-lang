//===----------------------------------------- Helix -----------------------------------------====//
//                                                                                                //
//  Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).       //
//  You are allowed to use, modify, redistribute, and create derivative works, even for           //
//  commercial purposes, provided that you give appropriate credit, and indicate if changes       //
//   were made. For more information, please visit: https://creativecommons.org/licenses/by/4.0/  //
//                                                                                                //
//  SPDX-License-Identifier: CC-BY-4.0                                                            //
//  Copyright (c) 2024 (CC BY 4.0)                                                                //
//                                                                                                //
//====----------------------------------------------------------------------------------------====//

ffi "c++" import "cstdio";
ffi "c++" import "iostream";
ffi "c++" import "vector";
ffi "c++" import "string";
ffi "c++" import "concepts";
// TODO: Make this is only to be added if interfaces are used that return types

// Define the Fraction struct with n and d (numerator and denominator)
struct Fraction {
    let n: i32;
    let d: i32;
}

// Add function at the global scope
fn add(a: i32, b: i32) -> i32 {
    return a + b;
}

// Overload the addition operator for Fraction
op + fn add(a: Fraction, b: Fraction) -> Fraction {
    let new_n = add(a.n + b.d, b.n + a.d);
    let new_d = a.d * b.d;
    return { .n = new_n,
             .d = new_d };
}

op - fn subtract(a: Fraction, b: Fraction) -> Fraction {
    let new_n = add(a.n - b.d, b.n - a.d);
    let new_d = a.d * b.d;
    return Fraction { n= new_n, d= new_d };
}

op * fn multiply(a: Fraction, b: Fraction) -> Fraction {
    let new_n = a.n * b.n;
    let new_d = a.d * b.d;
    return Fraction { n= new_n, d= new_d };
}

op / fn divide(a: Fraction, b: Fraction) -> Fraction {
    let new_n = a.n * b.d;
    let new_d = a.d * b.n;
    return Fraction { n= new_n, d= new_d };
}
/*
*/

// + - * / % ^ & | ~ ! = < > += -= *= /= %= ^= &= |= << >> >>= <<= == != <= >= <=>(since C++20) && || ++ -- , ->* -> ( ) [ ]

// Overload the unary minus operator for Fraction
op - fn unary_minus(a: Fraction) -> Fraction {
    return Fraction { n= -a.n, d= a.d };
}

// Overload the unary plus operator for Fraction

op + fn unary_plus(a: Fraction) -> Fraction {
    return Fraction { n= a.n, d= a.d };
}

// Overload the increment operator for Fraction

op ++ fn increment(a: Fraction) -> Fraction {
    return Fraction { n= a.n + a.d, d= a.d };
}

// Overload the decrement operator for Fraction

op -- fn decrement(a: Fraction) -> Fraction {
    return Fraction { n= a.n - a.d, d= a.d };
}

// Overload the addition assignment operator for Fraction

op += fn add_assign(a: Fraction, b: Fraction) -> Fraction {
    return a + b;
}

// Overload the subtraction assignment operator for Fraction

op -= fn subtract_assign(a: Fraction, b: Fraction) -> Fraction {
    return a - b;
}

// Overload the multiplication assignment operator for Fraction

op *= fn multiply_assign(a: Fraction, b: Fraction) -> Fraction {
    return a * b;
}

// Overload the division assignment operator for Fraction

op /= fn divide_assign(a: Fraction, b: Fraction) -> Fraction {
    return a / b;
}

// Overload the modulus assignment operator for Fraction

op %= fn modulus_assign(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n % b.n, d= a.d % b.d };
}

// Overload the bitwise AND assignment operator for Fraction

op &= fn bitwise_and_assign(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n & b.n, d= a.d & b.d };
}

// Overload the bitwise OR assignment operator for Fraction

op |= fn bitwise_or_assign(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n | b.n, d= a.d | b.d };
}

// Overload the bitwise XOR assignment operator for Fraction

op ^= fn bitwise_xor_assign(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n ^ b.n, d= a.d ^ b.d };
}

// Overload the left shift assignment operator for Fraction

op <<= fn left_shift_assign(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n << b.n, d= a.d << b.d };
}

// Overload the right shift assignment operator for Fraction

op >>= fn right_shift_assign(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n >> b.n, d= a.d >> b.d };
}

// Overload the modulus operator for Fraction

op % fn modulus(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n % b.n, d= a.d % b.d };
}

// Overload the bitwise AND operator for Fraction

op & fn bitwise_and(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n & b.n, d= a.d & b.d };
}

// Overload the bitwise OR operator for Fraction

op | fn bitwise_or(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n | b.n, d= a.d | b.d };
}

// Overload the bitwise XOR operator for Fraction

op ^ fn bitwise_xor(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n ^ b.n, d= a.d ^ b.d };
}

// Overload the left shift operator for Fraction

op << fn left_shift(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n << b.n, d= a.d << b.d };
}

// Overload the right shift operator for Fraction

op >> fn right_shift(a: Fraction, b: Fraction) -> Fraction {
    return Fraction { n= a.n >> b.n, d= a.d >> b.d };
}

// Overload the comparison operators for Fraction

op < fn less_than(a: Fraction, b: Fraction) -> bool {
    return a.n * b.d < b.n * a.d;
}

op > fn greater_than(a: Fraction, b: Fraction) -> bool {
    return a.n * b.d > b.n * a.d;
}

op <= fn less_than_or_equal(a: Fraction, b: Fraction) -> bool {
    return a.n * b.d <= b.n * a.d;
}

op >= fn greater_than_or_equal(a: Fraction, b: Fraction) -> bool {
    return a.n * b.d >= b.n * a.d;
}

// op <=> fn three_way_comparison(a: Fraction, b: Fraction) -> i32 {
//     if a.n * b.d < b.n * a.d {
//         return -1;
//     } else if a.n * b.d > b.n * a.d {
//         return 1;
//     } else {
//         return 0;
//     }
// }

op && fn logical_and(a: Fraction, b: Fraction) -> bool {
    return a.n && b.n && a.d && b.d;
}

op || fn logical_or(a: Fraction, b: Fraction) -> bool {
    return a.n || b.n || a.d || b.d;
}

op ! fn logical_not(a: Fraction) -> bool {
    return !a.n && !a.d;
}

// Overload the equality operator for Fraction
op == fn equals(a: Fraction, b: Fraction) -> bool {
    return a.n * b.d == b.n * a.d;
}

// // Overload the subscript operator for Fraction (returning numerator or denominator)
// op [] fn access_element(a: Fraction, index: i32) -> i32 {
//     if index == 0 {
//         return a.n;
//     } else if index == 1 {
//         return a.d;
//     } else {
//         panic "Index out of bounds";
//     }
// }

// // Function call operator, which returns the fraction's value as a floating-point number
// op () fn fraction_to_float(a: Fraction) -> float {
//     return a.n as float / a.d as float;
// }
// TODO: references do not work - THEY DO NOW!!!!
// Overload the stream insertion operator (for printing)
// op << fn stream_insert(out: std::ostream , a: Fraction) -> std::ostream {
//     return out << a.n << "/" << a.d;
// }

// Test the Fraction struct and operator overloads



// Recursive function to calculate factorial
fn factorial(n: i32) -> i32 {
    if n <= 1:
        return 1;

    return n * factorial(n - 1);
}

const eval fn range(n: i32) -> list::<i32> {
    let v: list::<i32>;

    for (let i: i32 = 0; i < n; i++) {
        v.push_back(i);
    }

    return v;
}

interface Foo {
    fn foo() -> i32;
}

interface Bar derives Foo {
    fn bar() -> i32;
}
class Fuzz {
    static fn foo() -> i32 {
        return 0;
    }
}



class Fish requires <T> if Bar in T, T derives Fuzz {
    let fish: T;
}




// fn fishy(f: Fish<T>) -> Fish<T> requires <T:Fizz> {
//     return f;
// }



// Function to print elements of a vector
// TODO: implement range-based for loop
fn print_vector(v: list::<i32>) -> void {
    for i in range(v.size()) {
        print(f"Vector element {i}: {v[i]}");
    }
}


class ABC {
    let a: i32;
    let b: i32;
    let c: i32;

    fn ABC(self, a: i32, b: i32, c: i32) {
        self.a = a;
        self.b = b;
        self.c = c;
    }

    fn print(self) -> void {
        ::print(f"a: {self.a}, b: {self.b}, c: {self.c}");
    }
}


/// WARNING: THIS ONLY FREES AT END OF SCOPE
/// use __sfree! to free stack memory in local scope like a loop
/// otherwise, use heap memory
// macro __salloc!(name, typ, size) {
//     let name: *typ = alloca(size * sizeof(typ));
// }

// macro __sfree!(name) {
//     free(name)
// }

class array requires <T, const N: u32> {
    let data: *T = alloca(N * sizeof(T)) as *T;
    let size: u32 = N;
}

fn hi_there() -> (int, string) {
    return (10, "Hello");
}

fn call_function() -> u32 {
    return 0x120ABA1;
}

ffi "c++" import "chrono";

fn main() -> i32 {
    let start = std::chrono::high_resolution_clock::now();
    // Adding two numbers
    let sum = add(5, 7);
    const x: i32 = 10;
    print(f"Sum: {sum}");

    // Calculating factorial
    let fact = factorial(5);
    print(f"Factorial: {fact}");

    // Working with a C++ vector
    let numbers: list::<i32> = [1, 2, 3, 4];
    numbers.push_back(10);
    numbers.push_back(20);
    numbers.push_back(30);
    numbers.push_back(40);
    numbers.push_back(50);

    let a: i32 = 10;
    let bp: *i32 = &a;

    let xy = hi_there();
    print(f"x: {std::get::<0>(xy)}, y: {std::get::<1>(xy).c_str()}");
    print(f"numbers = {numbers}");

    let primitive_numbers: *u32 = alloca(5 * sizeof(u32)) as *u32;
    primitive_numbers[0] = 1;
    primitive_numbers[1] = 2;
    primitive_numbers[2] = 3;
    primitive_numbers[3] = 4;
    primitive_numbers[4] = 5;


    for i in range(5) {
        print(f"Primitive number {i}: {primitive_numbers[i]}");
    }

    print("Primitive numbers freed");

    let windows_open_adder: *i32 = 0xAB128 as unsafe *i32;

    print(f"windows_open_adder: {windows_open_adder}");
    print(f"windows_open: {a}");

    print(f"bp: {*bp}");
    print(f"bp address: {bp}");

    // Printing vector elements
    print_vector(numbers);

    // Using C++ std::string
    let greeting = std::string("Hello from Helix and C++!");
    std::cout << greeting << std::endl;

    // Conditional check
    if sum > fact {
        print("Sum is greater than factorial.");
    } else {
        print("Factorial is greater than or equal to sum.");
    }

    let f1: Fraction = { .n=1, .d=2 };
    let f2: Fraction = { .n=3, .d=4 };

    let f3 = f1 + f2;

    // Use C-style printf for output
    print(f"f1: {f1.n}/{f1.d}");
    print(f"f2: {f2.n}/{f2.d}");
    print(f"f3 (f1 + f2): {f3.n}/{f3.d}");
    print(f"f1 == f2: {"true" if f1 == f2 else "false"}");

    print("true" if (3 + 2 * 5    == 13) else "false");
    print("true" if ((3 + 2) * 5  == 25) else "false");
    print("true" if (10 / 2 + 3   == 8 ) else "false");
    print("true" if (10 / (2 + 3) == 2 ) else "false");
    print("true" if (5 + 4 - 3    == 6 ) else "false");

    // Accessing elements using the subscript operator
    // printf("f1 numerator (f1[0]): %d\n", f1[0]);
    // printf("f1 denominator (f1[1]): %d\n", f1[1]);

    // Calling the function call operator to get the fraction as float
    // printf("f1 as float: %f\n", f1());
    // Creating an object of class ABC

    let obj = ABC(10, 20, 30);
    obj.print();

    print(f"testing \{ wooo \} {call_function() + 182 + 21991} hhhjjj ");

    let end = std::chrono::high_resolution_clock::now();


    /// in ns
    let duration = (end - start).count() / 1000;

    print(f"Time taken: {duration} ns");

    return 0;
}
