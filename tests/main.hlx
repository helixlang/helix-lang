"hello \" world"
(r"hello \" world");

fn main() {
    let a = "bruh";
    print(
        if a == "bruh":
            if a == "1":
                "lamo"
            else:
                "sad"
        else:
            "bigger sad"
    );
}

/* =====------ generic instantiation ------=====*/

/* =====------ 2 ------=====*/
fn add(a: T, b: U) -> T
    requires (T, U): Addable
                + Subable
                + Copyable {
    return ((a as T) + (b as U)) as T;
}

fn add(a: T) -> T
    requires const ConstT: u64 = 0,
             T: Addable
                    + Subable
                    + Copyable {
    return (a + ConstT) as T;
}

add<10, float>(6);



fn add(a: T, b: T) -> T
    where T {
        // ...
}
/* =====------ calling convention ------=====*/

/* =====------ 1 ------=====*/
let a = add<float, int*>(1, 2);
