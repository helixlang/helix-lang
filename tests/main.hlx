
ffi "c++" import "hi_there"


/*
const cols: int = 14;

fn parse_char(c: char) -> string {
    return f"{c:02X}"
}

fn main() {
    let path: string = file_sytem::get_bin_path();
    
    file_sytem::open(path, "rb") as file {
        // read 14 cols in chunks of 20 chars
        for chunk: string in range(file.read(cols), 20) {
            let hex_chunk: string;
            
            for character: char in chunk {
                // types for range based loops can be inferd but specifing
                // it would cast the iter output to the specified type
                // so `for character in chunk` would just work.

                if character < 0x20 || character > 0x7E {
                    hex_chunk += ".";
                } else {
                    hex_chunk += character as string;
                }
            }

            let hex_str: string = chunk.map(parse_char).join(" ");
            let padding: string = " " * (3 * (cols - chunk.len()));

            file.write(f"{hex_str}{padding}  {hex_chunk}\n");
        }
    }
}
*/

/* helix::panic takes the following args:

PanicFrame(
    the error: T requres T is Stringable
    the sournding lines based on the proj config: list<tuple<string, bool>>
    the file name: string
    the line number: u64
)
*/
// helix::panic(PanicFrame(RuntimeError("faild"), [("const cols: int = 14;", false), ("fn parse_char(c: char) -> char {", false), ("    panic RuntimeError(\"faild\");", true), ("}", false)], "tests/main.hlx", 4));