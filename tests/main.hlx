// import test_imports; // module import
// import test_imports::some_import; // file import
import test_imports::test;

#[
    doc("
    ---
    title: Main API
    ---
    import { Tabs, TabItem } from '@astrojs/starlight/components';

    Welcome to Helix! It's traditional when learning a new language to write a program that prints "Hello, World!" to the screen. We'll follow this tradition here.

    :::note
    This guide assumes basic familiarity with the command line. Helix makes no specific demands about your editing tools or where your code lives. Feel free to use your favorite IDE. Many IDEs support Helix; check their documentation for details.
    :::

    ## Writing and Running a Helix Program

    First, create a new directory for your Helix project. Ideally in `~/projects/hello_world`
    Next, create a new source file and call it `main.hlx`. Helix files use the `.hlx` extension. If you're using more than one word in your filename, use an underscore to separate them (e.g., `hello_world.hlx`).

    Open the `main.hlx` file you just created and enter the following code:

    ```Helix title=\"main.hlx\"
    fn main() {
        print(\"Hello, World!\");
    }
    ```

    ### Compiling and Running the Program

    Save the file and return to your terminal in the `~/projects/hello_world` directory. To compile your Helix program, run:

    ```sh
    helix main.hlx
    ```

    This is a doc comment
    its in mdx format and would be used
    by the auto doc-gen tool built into the compiler
    it allows for users to write clea and readable comments.
    ")
]
fn main() -> int? { // becomes std::optional<int>
    print("hey there", "hello");
}

fn main2() -> int {
    print("hey there", "hello");
}