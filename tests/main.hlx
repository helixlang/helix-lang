ffi "c++" import "cstdio";
ffi "c++" import "iostream";
ffi "c++" import "vector";
ffi "c++" import "string";

// Function to add two integers
fn add(a: int, b: int) -> int {
    return a + b;
}

// Recursive function to calculate factorial
fn factorial(n: int) -> int {
    if n <= 1 {
        return 1;
    }
    return n * factorial(n - 1);
}

const eval fn range(n: int) -> std::vector<int> {
    let v: std::vector<int>;

    for (let i: int = 0; i < n; i++) {
        v.push_back(i);
    }
    
    return v;
}

// Function to print elements of a vector
// TODO: implement range-based for loop
fn print_vector(v: std::vector<int>) -> void {
    for i in range(v.size()) {
        printf("Vector element %d: %d\n", i, v[i]);
    }
}

fn main() -> int {
    // Adding two numbers
    let sum = add(5, 7);
    printf("Sum: %d\n", sum);

    // Calculating factorial
    let fact = factorial(5);
    printf("Factorial: %d\n", fact);

    // Working with a C++ vector
    let numbers: std::vector<int> = [1, 2, 3, 4];
    numbers.push_back(10);
    numbers.push_back(20);
    numbers.push_back(30);
    numbers.push_back(40);
    numbers.push_back(50);

    // Printing vector elements
    print_vector(numbers);

    // Using C++ std::string
    let greeting = std::string("Hello from Helix and C++!");
    std::cout << greeting << std::endl;

    // Conditional check
    if sum > fact {
        printf("Sum is greater than factorial.\n");
    } else {
        printf("Factorial is greater than or equal to sum.\n");
    }

    return 0;
}
