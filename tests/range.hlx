//===----------------------------------------- Helix -----------------------------------------====//
//                                                                                                //
//  Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).       //
//  You are allowed to use, modify, redistribute, and create derivative works, even for           //
//  commercial purposes, provided that you give appropriate credit, and indicate if changes       //
//   were made. For more information, please visit: https://creativecommons.org/licenses/by/4.0/  //
//                                                                                                //
//  SPDX-License-Identifier: CC-BY-4.0                                                            //
//  Copyright (c) 2024 (CC BY 4.0)                                                                //
//                                                                                                //
//====----------------------------------------------------------------------------------------====//
//                                                                                                //
// \brief This is the range module, it provides a range generator class that can be used to       //
//        generate ranges of any type that can be iterated over.                                  //
//                                                                                                //
//====----------------------------------------------------------------------------------------====//

/// usage:
///
/// import range;
///
/// for i in range(0, 10) {
///     print(i);
/// }
///
/// for i in range('a', 'z') {
///     print(i);
/// }
///



/// OP's in class defs need to ignore self parm and work without self while calling as well.

ffi "c++" import "cstdio";

interface Incrementable {
    op ++ fn inc(self) -> Self;
}

fn range(start: T, end: T, step: T = 1) -> yield T requires <T> if Incrementable in T {
    while start < end {
        yield start;
        
        start += step;
    }
}

fn range(end: T) -> yield T requires <T> if Incrementable in T {
    let start: T = 0;
    while start < end {
        yield start;
        ++start;
    }
}

fn main() -> int {
    let iter = range(0, 10);
    
    for i: int in iter {
        print(f"{i}");
    }

    for i in range('a', 'z') {
        print(f"{i}");
    }

    return 0;
}