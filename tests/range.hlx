//===----------------------------------------- Helix -----------------------------------------====//
//                                                                                                //
//  Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).       //
//  You are allowed to use, modify, redistribute, and create derivative works, even for           //
//  commercial purposes, provided that you give appropriate credit, and indicate if changes       //
//   were made. For more information, please visit: https://creativecommons.org/licenses/by/4.0/  //
//                                                                                                //
//  SPDX-License-Identifier: CC-BY-4.0                                                            //
//  Copyright (c) 2024 (CC BY 4.0)                                                                //
//                                                                                                //
//====----------------------------------------------------------------------------------------====//
//                                                                                                //
// \brief This is the range module, it provides a range generator class that can be used to       //
//        generate ranges of any type that can be iterated over.                                  //
//                                                                                                //
//====----------------------------------------------------------------------------------------====//

/// usage:
///
/// import range;
///
/// for i in range(0, 10) {
///     print(i);
/// }
///
/// for i in range('a', 'z') {
///     print(i);
/// }
///
/// op's in class defs need to ignore self parm and work without self while calling as well.
import core::lol::*;
ffi "c++" import "iostream";
ffi "c++" import "chrono";

// interface Incrementable {
//     op ++ fn inc(self) -> Self;
//     op < fn lt(self, other: Self) -> bool;
//     op == fn eq(self, other: Self) -> bool;
// }

module some_namespace {
    class Foo requires <T> {
        fn Foo(self) {
            print("Foo");
        }
    }

    type Bar = int;
}

fn range(start: T, end: T, step: T = 1) -> yield T requires <T> {
    while start < end {
        yield start;
        start += step;
    }
}

class SomeBad {
    priv let start: i32;
    priv let end: i32;

    fn SomeBad(self) {
        self.start = 0;
        self.end = 10;
    }

    fn iter(self) -> yield i32 {
        let i = self.start;
        
        while i < self.end {
            yield i++;
        }
    }
}

fn range(end: T) -> yield T requires <T> {
    let start = T();

    while start < end {
        yield start;
        ++start;
    }
}

fn multi_iter() -> yield (int, float) {
    yield (1, 1.0);
    yield (2, 2.0);
    yield (3, 3.0);
}
// find closest if either left or right is the same then take right
fn main() -> int {
    let start = std::chrono::high_resolution_clock::now();
    
    finally {
        let end = std::chrono::high_resolution_clock::now();
        let duration = std::chrono::duration_cast::<std::chrono::nanoseconds>(end - start).count();
        print(f"Time taken: {duration}ns");
    }

    let some_a: *SomeBad = malloc(sizeof(SomeBad)) as unsafe *SomeBad;
    finally {
        print("freeing some_a");
        free(some_a as unsafe *void);
    }

    let foo: some_namespace::Foo::<some_namespace::Bar> = some_namespace::Foo::<some_namespace::Bar>();

    finally {
        print("Finally block 2");
        print("This is the end of the program 2");
    }

    print(add(1, "2"));

    for i in some_a->iter() {
        print(i);
    }

    let iter = range::<i32>(0, 10, 9);

    print(f"Iterating over range(0, 10): {next(iter)}");
    print(f"Iterating over range(0, 10): {next(iter)}");
    
    for i in range(0, 10) {
        print(i);
    }

    let a = 0;
    let b = 10;

    for i in range(a, b) {
        print(i);
    }

    for i, y in multi_iter():
        print(f"i = {i}, y = {y}");

    for i in range('a', 'z'):
        print(f"i = {(i - 19) as char}");

    return 0;
}

class Foo extend Bar::<T> requires <T, U> {}

// grantee that a..b becomes range(a, b); and a..=b becomes range(a, b++);
// a and b must implement Incrementable and be Equatable