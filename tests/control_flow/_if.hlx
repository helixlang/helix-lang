// testing control_folw with if else else if unless statements

fn test_if() {
    let x = 10;
    let y = 20;
    let result;

    if x < y {
        result = 1;
    } else if x > y {
        result = 2;
    } else {
        result = 3;
    }
    
    assert result == 1, f"IF TEST RETURNED {result}";

    // Using unless
    let a = 5;
    let b = 10;
    let result_unless;

    unless a == b {
        result_unless = 4;
    } else {
        result_unless = 5;
    }

    assert result_unless == 4, f"UNLESS TEST RETURNED {result_unless}";
}

fn test_while() {
    let x = 0;
    let sum = 0;
    
    while x < 5 {
        sum += x;
        x += 1;
    }
    
    assert sum == 10, f"WHILE TEST RETURNED {sum}";
}

fn test_for() {
    let sum = 0;
    
    for let i = 0; i < 5; i += 1 { // c style for loop
        sum += i;
    }
    
    assert sum == 10, f"C STYLE FOR LOOP TEST RETURNED {sum}";

    sum = 0;

    for i in range(0, 5) { // python style for loop
        sum += i;
    }

    assert sum == 10, f"PYTHON STYLE FOR LOOP TEST RETURNED {sum}";

    sum = 0;

    for i in [0, 1, 2, 3, 4] { // array style for loop
        sum += i;
    }

    assert sum == 10, f"ARRAY STYLE FOR LOOP TEST RETURNED {sum}";
}

fn test_switch() {
    let x = 2;
    let result;
    
    switch (x) {
        case 1: {
            result = "one";
            break;
        }
        case 2: {
            result = "two";
            break;
        }
        default: {
            result = "other";
        }
    }
    
    assert result == "two", f"SWITCH TEST RETURNED {result}";
}

fn test_return() {
    fn add(a: i32, b: i32) -> i32 {
        return a + b;
    }
    
    let result = add(2, 3);
    assert result == 5, f"RETURN TEST RETURNED {result}";
}

fn test_break() {
    let x = 0;
    let sum = 0;
    
    while (true) {
        if (x >= 5) {
            break;
        }
        sum += x;
        x   += 1;
    }
    
    assert sum == 10, f"BREAK TEST RETURNED {sum}";
}

fn test_continue() {
    let x   = 0;
    let sum = 0;
    
    while (x < 5) {
        x += 1;
        if (x % 2 == 0) {
            continue;
        }
        sum += x;
    }
    
    assert sum == 9, f"CONTINUE TEST RETURNED {sum}";
}