pub const CONTENT:&'static str =
        r#"
        op ^ as xor(lhs: bool, rhs: bool) == bool {
            return lhs ^ rhs;
        }
        static async fn factorial(n: int) -> int {
            if (n > 1) {
                return n * factorial(n - 1);
            } else {
                a: map<map<int, map<int, int>>, int>? = {{1 : {2 : 3} } : 3};
                return 1;
            }
        }
        fn main() {
            let n: int?;
            fn somethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ersomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3gb083g08q3(n: int) -> string {
                return match (n) {
                    1 -> "one",
                    2 -> "two",
                    3 -> "three",
                    _ -> "anything else"
                };
            }
            n = int::parse(input("Enter a positive integer"));
            print("Factorial of " + n + " = " + factorial(n));
        }
        class wfjqwoegjqoefjiekrfowkgoqwgkf23osomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hgsomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3894ht80qnuq9ergb083g08q3rkiqgijefoqwjsomethingefijqdjfoiehrifjjaeboeroqrojqwfjqwoegjqoefjiekrfowkgoqwgkf23osomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hgsomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3wfjqwoegjqoefjiekrfowkgoqwgkf23osomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hgsomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3894ht80qnuq9ergb083g08q3rkiqgijefoqwjsomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3eo2j3tojq3obj35oqjgoq3kgqrego24jg894ht80qnuq9ergb083g08q3rkiqgijefoqwjsomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3eo2j3tojq3obj35oqjgoq3kgqrego24jgifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3eo2j3tojq3obj35oqjgoq3kgqrego24jg {
            fn new(self: ref, name: string, age: int, breed: string) {}
            fn info() {}
        }
        class Dog::Mammal {
            let name: string;
            let breed: string;
            let age: int;
            override Mammal:
                async fn new(self: ref, name: string, age: int, breed: string) {
                    self.breed = breed;
                    self.name = name;
                    self.age = age;
                    let a: int = 1 add 2 sub 2;
                    return a;
                }
            fn info() {
                print(self.name + " is a " + self.age + " year old " + self.breed);
            }
        } "#;

pub const EXPECTED:&'static [&'static str] = &[
            "op",
            "^",
            "as",
            "xor",
            "(",
            "lhs",
            ":",
            "bool",
            ",",
            "rhs",
            ":",
            "bool",
            ")",
            "==",
            "bool",
            "{",
            "return",
            "lhs",
            "^",
            "rhs",
            ";",
            "}",
            "static",
            "async",
            "fn",
            "factorial",
            "(",
            "n",
            ":",
            "int",
            ")",
            "->",
            "int",
            "{",
            "if",
            "(",
            "n",
            ">",
            "1",
            ")",
            "{",
            "return",
            "n",
            "*",
            "factorial",
            "(",
            "n",
            "-",
            "1",
            ")",
            ";",
            "}",
            "else",
            "{",
            "a",
            ":",
            "map",
            "<",
            "map",
            "<",
            "int",
            ",",
            "map",
            "<",
            "int",
            ",",
            "int",
            ">>",
            ",",
            "int",
            ">",
            "?",
            "=",
            "{",
            "{",
            "1",
            ":",
            "{",
            "2",
            ":",
            "3",
            "}",
            "}",
            ":",
            "3",
            "}",
            ";",
            "return",
            "1",
            ";",
            "}",
            "}",
            "fn",
            "main",
            "()",
            "{",
            "let",
            "n",
            ":",
            "int",
            "?",
            ";",
            "fn",
            "somethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ersomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3gb083g08q3",
            "(",
            "n",
            ":",
            "int",
            ")",
            "->",
            "string",
            "{",
            "return",
            "match",
            "(",
            "n",
            ")",
            "{",
            "1",
            "->",
            "\"one\"",
            ",",
            "2",
            "->",
            "\"two\"",
            ",",
            "3",
            "->",
            "\"three\"",
            ",",
            "_",
            "->",
            "\"anything else\"",
            "}",
            ";",
            "}",
            "n",
            "=",
            "int",
            "::",
            "parse",
            "(",
            "input",
            "(",
            "\"Enter a positive integer\"",
            ")",
            ")",
            ";",
            "print",
            "(",
            "\"Factorial of \"",
            "+",
            "n",
            "+",
            "\" = \"",
            "+",
            "factorial",
            "(",
            "n",
            ")",
            ")",
            ";",
            "}",
            "class",
            "wfjqwoegjqoefjiekrfowkgoqwgkf23osomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hgsomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3894ht80qnuq9ergb083g08q3rkiqgijefoqwjsomethingefijqdjfoiehrifjjaeboeroqrojqwfjqwoegjqoefjiekrfowkgoqwgkf23osomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hgsomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3wfjqwoegjqoefjiekrfowkgoqwgkf23osomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hgsomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3894ht80qnuq9ergb083g08q3rkiqgijefoqwjsomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3eo2j3tojq3obj35oqjgoq3kgqrego24jg894ht80qnuq9ergb083g08q3rkiqgijefoqwjsomethingefijqdjfoiehrifjjaeboeroqrojqifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3eo2j3tojq3obj35oqjgoq3kgqrego24jgifhqwiejfowiegohq349ugq34hg894ht80qnuq9ergb083g08q3eo2j3tojq3obj35oqjgoq3kgqrego24jg",
            "{",
            "fn",
            "new",
            "(",
            "self",
            ":",
            "ref",
            ",",
            "name",
            ":",
            "string",
            ",",
            "age",
            ":",
            "int",
            ",",
            "breed",
            ":",
            "string",
            ")",
            "{",
            "}",
            "fn",
            "info",
            "()",
            "{",
            "}",
            "}",
            "class",
            "Dog",
            "::",
            "Mammal",
            "{",
            "let",
            "name",
            ":",
            "string",
            ";",
            "let",
            "breed",
            ":",
            "string",
            ";",
            "let",
            "age",
            ":",
            "int",
            ";",
            "override",
            "Mammal",
            ":",
            "async",
            "fn",
            "new",
            "(",
            "self",
            ":",
            "ref",
            ",",
            "name",
            ":",
            "string",
            ",",
            "age",
            ":",
            "int",
            ",",
            "breed",
            ":",
            "string",
            ")",
            "{",
            "self",
            ".",
            "breed",
            "=",
            "breed",
            ";",
            "self",
            ".",
            "name",
            "=",
            "name",
            ";",
            "self",
            ".",
            "age",
            "=",
            "age",
            ";",
            "let",
            "a",
            ":",
            "int",
            "=",
            "1",
            "add",
            "2",
            "sub",
            "2",
            ";",
            "return",
            "a",
            ";",
            "}",
            "fn",
            "info",
            "()",
            "{",
            "print",
            "(",
            "self",
            ".",
            "name",
            "+",
            "\" is a \"",
            "+",
            "self",
            ".",
            "age",
            "+",
            "\" year old \"",
            "+",
            "self",
            ".",
            "breed",
            ")",
            ";",
            "}",
            "}",
        ];