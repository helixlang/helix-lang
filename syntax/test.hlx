

~~ print(argv);


~~ do_something();
~~ test_int();
~~ test_float();
~~ test_double();
~~ test_char();
~~ test_string();
~~ test_bool();
~~ test_list();
~~ test_tuple();
~~ test_list();
~~ test_set();


~*~
import random
import time
import os

class Field:
    def __init__(self, w, h):
        self.w = w
        self.h = h
        self.s = [[false for _ in range(w)] for _ in range(h)]

    def set(self, x, y, b):
        self.s[y][x] = b

    def alive(self, x, y):
        x = (x + self.w) % self.w
        y = (y + self.h) % self.h
        return self.s[y][x]

    def next(self, x, y):
        alive = 0
        for i in C_For(i=-1).set_con("i <= 1").set_inc("i++"):
            for j in C_For(j=-1).set_con("j <= 1").set_inc("j++"):
                if (i != 0 or j != 0) and self.alive(x+i, y+j):
                    alive += 1
        return alive == 3 or (alive == 2 and self.alive(x, y))

class Life:
    def __init__(self, w, h):
        self.w = w
        self.h = h
        self.a = Field(w, h)
        self.b = Field(w, h)
        for _ in range(w * h // 4):
            self.a.set(random.randint(0, w-1), random.randint(0, h-1), true)

    def step(self):
        for y in C_For(y=0).set_con("y < self.h").set_inc("y++"):
            for x in C_For(x=0).set_con("x < self.w").set_inc("x++"):
                self.b.set(x, y, self.a.next(x, y))
        self.a, self.b = self.b, self.a

    def __str__(self):
        result = ""
        for y in C_For(y=0).set_con("y < self.h").set_inc("y++"):
            for x in C_For(x=0).set_con("x < self.w").set_inc("x++"):
                result += '*' if self.a.alive(x, y) else ' '
            result += '\n'
        return result

def main():
    l = Life(40, 15)
    for _ in C_For(i=0).set_con("i < 300").set_inc("i++"):
        l.step()
        os.system('cls' if os.name == 'nt' else 'clear')
        print(l, end='', flush=true)
        time.sleep(1 / 30)
~*~


class C_cout {
    fn <<(self, a: string) {
        print(a);
    }
}

fn main(argv: list<string>) {
    let a: int = "12";
    
    add(123, 123);
    print(add.join());

    do_something();
    do_something.join();
    
    print("done");
    return 0;
}

async fn add(a: int, b: int) -> int {
    printf("adding: %d + %d", a, b);
    return a + b;
}

private fn subtract(a: int, b: int) -> int {
    return a - b
}


async fn do_something() {
    for (var i: int = 0; i < 10; i++) {
        printf("doing something: %d", i);
    }
}


fn a_cursed_fucntion(a: int)    -> FunctionType { printf("new something: %d", a); return a_cursed_fucntion }

~*~
fn test_int() {
    let a: int = 21;
    let b: int = 42;
    printf("just adding: %d", a + b);

    a = 42;
    printf("a is now: %d", a);

}

fn test_float() {
    let a: float = 1;
    let b: float = 7;
    print("a / b is", a / b);
}

fn test_double() {
    let a: double = 1.0;
    let b: double = 7.0;
    print("a / b is", a / b);
}

fn test_char() {
    let a: char = 'a';
    let b: char = 'b';
    print("a + b is", a + b);
}

fn test_string() {
    let a: string = "hello";
    let b: string = "world";
    print("a + b is", a + b);
}


fn test_bool() {
    let a: bool = true;
    let b: bool = false;
    print("a and b is", a && b);
    print("a or b is", a || b);
    print("not a is", !a);
}

fn test_list() {
    let a: list<int> = [1, 2, 3];
    let b: list<int> = [4, 5, 6];
    print("list a is", a);
    exit();
}

fn test_tuple() {
    let a: tuple<int> = (1, 2, 3);
    let b: tuple<int> = (4, 5, 6);
    print("a + b is", a + b);
}

fn test_map() {
    let a: map<string, int> = { "a": 1, "b": 2, "c": 3 };
    let b: map<string, int> = { "d": 4, "e": 5, "f": 6 };
    print("a + b is", a + b);
}

fn test_set() {
    let a: set<int> = { 1, 2, 3 };
    let b: set<int> = { 4, 5, 6 };
    print("a + b is", a + b);
}
~*~