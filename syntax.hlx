include PY("numpy");
include "test" from RS("test.rs");
include ("add","sub") from CPP("test.cpp");



static async fn factorial(n: int) -> int {
    if (n > 1) {
        return n * factorial(n - 1);
    } else {
        a: map<map<int, map<int, int>>, int>? = {
            {1 : {2 : 3} } : 3
        }; ~~ become a = map({{1 : {2 : 3} } : 3}, null_safe=False)
        
        return 1;
    }

    fn new_function(n: int) -> int {
        if (n == 0) {
            return 1;
        } else {
            return n * new_function(n - 1);
        }
    }

    for (var i = 0; t >= 0; i < 10; i++) {
        print(i);
    }

    return 0xff01;
}

fn main() {
    let n: int?; ~~ ? initializes to null instead of 0

    fn factorial(n: int) -> int {
        if (n > 1) {
            return n * factorial(n - 1);
        } else {
            return 1 + 1;
        }
    }

    n = int::parse(input("Enter a positive integer "));
    print("Factorial of " + n + " = " + factorial(n));
    
    return 0;
}

~~ All Primitive Types
~~ int;
~~ string;
~~ float;
~~ map;
~~ list;
~~ bool;
~~ char;
~~ void;
~~ tuple;
~~ array;
~~ set;

~~ u8;
~~ u16;
~~ u32;
~~ u64;
~~ u128;
~~ i8;
~~ i16;
~~ i32;
~~ i64;
~~ i128;
~~ f32;
~~ f64;
~~ f128;