/**
 * @file better_ints.hpp
 * @brief Header file that provides enhanced integer types and macros for better
 * readability and compatibility.
 *
 * This file, better_ints.hpp, is an improved version of the standard cstdint
 * header file, modified for enhanced readability and compatibility with Helix
 * and other projects. It includes standard integer types along with fast and
 * maximum size types, providing a broader range of signed and unsigned integers
 * with specific width guarantees.
 *
 * The definitions align closely with those in the Windows SDK, ensuring that
 * the macros match exactly for compatibility. The file conditionally compiles
 * different macros and type definitions based on the compiler and platform,
 * ensuring optimal performance and size compatibility across different systems
 * (e.g., 32-bit vs. 64-bit).
 *
 * Modifications from the original Visual C++ runtime library include
 * simplifications and adjustments to meet the specific needs of the Helix
 * compiler environment. The copyright belongs to Microsoft Corporation, with
 * the file re-licensed under Apache-2.0 WITH LLVM-exception for broader use
 * within the community.
 *
 * Helix License: CC Attribution 4.0 International
 * @see http://creativecommons.org/licenses/by/4.0/
 *
 * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
 * Original Code Credit: Microsoft Corporation
 *
 * @author Dhruvan Kartik
 * @original-author Microsoft Corporation
 * @doc generated by ChatGPT
 * This work is licensed under the Creative Commons Attribution 4.0
 * International License. To view a copy of this license, visit
 * http://creativecommons.org/licenses/by/4.0/ or send a letter to Creative
 * Commons, PO Box 1866, Mountain View, CA 94042, USA.
 * @see http://creativecommons.org/licenses/by/4.0/
 */
#pragma once

#include <cstdint>

typedef int8_t         i8;
typedef int16_t        i16;
typedef int32_t        i32;
typedef int64_t        i64;
typedef uint8_t        u8;
typedef uint16_t       u16;
typedef uint32_t       u32;
typedef uint64_t       u64;

typedef int_fast8_t    i8_fast;
typedef int_fast16_t   i16_fast;
typedef int_fast32_t   i32_fast;
typedef int_fast64_t   i64_fast;
typedef uint_fast8_t   u8_fast;
typedef uint_fast16_t  u16_fast;
typedef uint_fast32_t  u32_fast;
typedef uint_fast64_t  u64_fast;

typedef intmax_t       isize_max;
typedef uintmax_t      usize_max;

#ifdef _WIN32
    #include <vcruntime.h>
#endif

#if _VCRT_COMPILER_PREPROCESSOR

#pragma warning(push)
#pragma warning(disable: _VCRUNTIME_DISABLED_WARNINGS)

// These macros must exactly match those in the Windows SDK's intsafe.h.
#define I8_MIN  (-127i8 - 1)
#define I16_MIN (-32767i16 - 1)
#define I32_MIN (-2147483647i32 - 1)
#define I64_MIN (-9223372036854775807i64 - 1)
#define I8_MAX  127i8
#define I16_MAX 32767i16
#define I32_MAX 2147483647i32
#define I64_MAX 9223372036854775807i64
#define U8_MAX  0xffui8
#define U16_MAX 0xffffui16
#define U32_MAX 0xffffffffui32
#define U64_MAX 0xffffffffffffffffui64

#define I8_FAST_MIN   I8_MIN
#define I16_FAST_MIN  I32_MIN
#define I32_FAST_MIN  I32_MIN
#define I64_FAST_MIN  I64_MIN
#define I8_FAST_MAX   I8_MAX
#define I16_FAST_MAX  I32_MAX
#define I32_FAST_MAX  I32_MAX
#define I64_FAST_MAX  I64_MAX
#define U8_FAST_MAX   U8_MAX
#define U16_FAST_MAX  U32_MAX
#define U32_FAST_MAX  U32_MAX
#define U64_FAST_MAX  U64_MAX

#ifdef _WIN64
    #define IPTR_MIN  I64_MIN
    #define IPTR_MAX  I64_MAX
    #define UPTR_MAX  U64_MAX
#else
    #define IPTR_MIN  I32_MIN
    #define IPTR_MAX  I32_MAX
    #define UPTR_MAX  U32_MAX
#endif

#define IMAX_MIN      I64_MIN
#define IMAX_MAX      I64_MAX
#define UMAX_MAX      U64_MAX

#ifndef PTRDIFF_MIN
    #define PTRDIFF_MIN   IPTR_MIN
#endif

#ifndef PTRDIFF_MAX
    #define PTRDIFF_MAX   IPTR_MAX
#endif

#ifndef SIZE_MAX
    #ifdef _WIN64
        #define SIZE_MAX 0xffffffffffffffffui64
    #else
        #define SIZE_MAX 0xffffffffui32
    #endif
#endif

#ifndef SIG_ATOMIC_MIN
    #define SIG_ATOMIC_MIN I32_MIN
#endif

#ifndef SIG_ATOMIC_MAX
    #define SIG_ATOMIC_MAX I32_MAX
#endif

#ifndef WCHAR_MIN
    #define WCHAR_MIN 0x0000
#endif

#ifndef WCHAR_MAX
    #define WCHAR_MAX 0xffff
#endif

#ifndef WI_MIN
    #define WI_MIN 0x0000
#endif

#ifndef WI_MAX
    #define WI_MAX 0xffff
#endif

#define I8_C(x)   (x)
#define I16_C(x)  (x)
#define I32_C(x)  (x)
#define I64_C(x)  (x ## LL)

#define U8_C(x)   (x)
#define U16_C(x)  (x)
#define U32_C(x)  (x ## U)
#define U64_C(x)  (x ## ULL)

#define IMAX_C(x) I64_C(x)
#define UMAX_C(x) U64_C(x)

#endif // _VCRT_COMPILER_PREPROCESSOR
