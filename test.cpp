///*--- Helix ---*
///
///  Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).
///  You are allowed to use, modify, redistribute, and create derivative works, even for
///  commercial purposes, provided that you give appropriate credit, and indicate if changes
///  were made. For more information, please visit: https://creativecommons.org/licenses/by/4.0/
///
///  SPDX-License-Identifier: CC-BY-4.0
///  Copyright (c) 2024 (CC BY 4.0)
///
///  This file was generated by the Helix compiler, do not modify it directly.
///  Generated on: 1729034410 [unix-timestamp]
///
///*--- Helix ---*

#include <iostream>
#include <ostream>
#include "cstdio"

template <typename T>
class box {
  public:
    box() = default;
    ~box() = default;

    explicit box(T val)
        : _val(new T(val)) {}

    T get() const {
        return _val;
    }

    explicit operator T() const {
        return *_val;
    }

    explicit operator T&() {
        return *_val;
    }

    box &operator=(const T &val) {
        *_val = val;
        return *this;
    }

    private:
    T* _val;

    friend std::ostream &operator<<(std::ostream &os, const box &b) {
        os << *(b._val);
        return os;
    }

    friend bool operator==(const box &lhs, const box &rhs) {
        return *(lhs._val) == *(rhs._val);
    }
};

int main() {
    box<int> b(5);
    std::cout << b << std::endl;
}