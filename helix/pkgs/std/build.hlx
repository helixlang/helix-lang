// build.hx - The build script for std

// this is a hypotechical build script in helix
// syntax is not final tho.

import build_tools as bt;

class Array {
    fn map(self, func: Function<(Element_Ty), Element_Ty>) requires <Element_Ty> {

    }
}

module build_tools {
class InvalidInput derives BaseError {
    fn InvalidInput(self, msg: string) {
        super.msg = msg;
    }

    fn to_string(self) -> string {
        return super.msg;
    }
}

class BuildConfig {
    let target: string;
    let cxx_toolchain: string;
    // ...

    fn BuildConfig(self) {}

    fn set_target(self, target: string) -> &self {
        self.target = target;

        let allowed_targets = (
            "x86_64-apple-darwin",
            "x86_64-windows-none",
            "x86_64-windows-msvc",
            // ...
        );

        if !(target in allowed_targets) {
            panic InvalidInput(f"provided target: {target} in invalid use a vali tripple");
        }

        return &self;
    }
}
}

import git;

import python_ffi;

fn build() -> noreturn! {
    let config = bt::BuildConfig()
        .set_target("x86_64-apple-darwin")
        .set_cxx_toolchain("clang++")
        .set_output_dir("build")
        .set_optimization_level(bt::optimization::RELEASE);

    let builder = bt::Builder(config)
           .add_source("src/main.helix")
           .add_source("src/utils.helix")
           .add_ffi(python_ffi::FFI())
           .add_ffi(cpp_ffi::FFI())
           .add_include_path("include")
           .set_output("std")
           .set_standalone(true); // no runtime dependents
           .set_build("lib");     // lib | bin
    
    if (git::file_changed("src/test.py")) {
        bt::run();
    }

    builder.compile();
    bt::run_tests();
}