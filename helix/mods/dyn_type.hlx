using "c++" {
    priv import <any>;
    priv import <memory>;
    priv import <typeinfo>;
}

define make_any_ptr(expr, T): std::make_any<std::unique_ptr<T>>(std::make_unique<T>(expr));
define any_cast(expr, T):     std::any_cast<std::unique_ptr<T>>(expr);

priv type Any = std::any;

class Dyntype<T> {
    priv let value: Any;

    fn new(value: T) {
        self.set(value);
    }

    op = as assign(self, value: T) -> &Dyntype {
        self.set(value);
        return self;
    }

    fn set(self, value: T) {
        self.value = make_any_ptr!(value, T);
    }

    fn get<U>(self) -> void* {
        return ptr.get();
    }

    fn type(self) -> &std::type_info {
        return self.value.type();
    }
}

fn main() {
    let a: Dyntype = 42;

    println("a = {}", a.get() as i32);

    a = 3.14;

    println("a dyn = {}", a.get() as f64);

    a = "Hello, World!";

    println("a dyn = {}", a.get() as string);
}