ffi "c++" {
    priv import <any>, <memory>, <typeinfo> in cpp;
}

define make_any_ptr(expr, T): std::make_any<std::unique_ptr<T>>(std::make_unique<T>(expr));
define any_cast(expr, T):     std::any_cast<std::unique_ptr<T>>(expr);

priv type Any = cpp::std::any;

class Dyntype derives Object requires <T> {
    priv let value: Any;

    fn new(value: T) {
        self.set(value);
    }

    op = as assign(self, value: T) -> &Dyntype {
        self.set(value);
        return self;
    }

    fn set(self, value: T) {
        self.value = make_any_ptr!(value, T);
    }

    fn get(self) -> void*
      requires <U> {
        return ptr.get();
    }

    fn type(self) -> &std::type_info {
        return self.value.type();
    }
}

fn main() {
    let a: Dyntype = 42;

    print("a = {}", a.get<i32>());

    a = 3.14;

    print("a dyn = {}", a.get<f64>());

    a = "Hello, World!";

    print("a dyn = {}", a.get<string>());
}