/* control flow */

macro _string! {
    to_string_some_special_name
}


class Foo {
    let a: u8;
    let b: u8;

    fn _string!()  -> string {
        return "Foo";
    }
}


class Foo {
    let a: u8;
    let b: u8;

    fn to_string_some_special_name()  -> string {
        return "Foo";
    }
}

class CustomType {
    let ptr: *char;
    let len: usize;

    fn __pyObject__() -> PyObject* {
        /// ...
    }
}

let a = CustomType("hello world");

let b = a as PyObject*;



/// 9
switch "word" {
    /// 2
    case "hi":
        /// 1
        break;
    case "boi":
    case "word" {
        print("word");
    }
    /// 4
    default: print("this broken");
}

/// 7
if true:
    print("true");
else if false {
    print("false");
/// 6
} else {
    print("false");
}

/// 10
unless false {
    print("true");
} else unless 1 == 2 {
    print("false");
} else {
    print("false");
}

// LOOPS

/// 6
for i in 0:10 {
    break;
}

const for i in 0:10 {
    /// 2
    continue;
}






/// 11
while true {
    break;
}

while false: break;


/* function && method */

/// 1
async fn background() -> string {
    /// 7
    return "yessir";
}

/// 2
define PI_MUL(x) {
    x * 3.143e-1
};

define PI_MUL(x): x * 3.143e-1;

/// 2
define FOO: 0;

fn add(a: int, b: int) -> int:
return (
    fn (a: int, b: int) -> int:
    return (
        fn (a: int, b: int) -> int:
        return (
            fn (a: int, b: int) -> int:
            return (
                fn (a: int, b: int) -> int:
                return (
                    fn (a: int, b: int) -> int:
                    return (
                        fn (a: int, b: int) -> u32:
                        return (a+b) as u32;
                    )(a, b) as int;
                )(a, b);
            )(a, b);
        )(a, b);
    )(a, b);
)(a, b);


let foo: tuple<u8, i8, u8, i8, u8> = (1, 2, 3, 4, 4, 5, 6)
let foo: (u8) = (6) // says error that not
let foo: u8 = 6

// optimize using avx
let mat: matrix<int,3,3> {
    1, 2, 3,
    2, 5, 6,
    3, 4, 7,
}

// dangling dildo pointer
let a: int* = &10; // invalid since you cant refrence a temp lvalue

// dyn and final cant be used together
let unsafe a = dyn!(10);

 a = "string";

 a.get<int>()

/// 3
fn add(a: int, b: int) -> int {
    return a + b;
}


fn add(a: int, b: int) -> int: return a + b;

fn add(a: int, b: int) -> int : a + b;

op + as fn add(lhs: u16, rhs: int) -> int: lhs + rhs;

u8 u16 u32 u128 i8 i16 i32 i128 f32 f64

f64 < 64 bytes
f64 > 64 bytes


let a:u32 = 10;
a.add(1)

in cpp

std::uint_32 add (std::uint_32 a, std::uint_32 b) {
    return a + b;
}

fn Map(iter: T, fn (T) -> T)
requires <T> if T has Iterable {

}


module extend_syntax {
    class Foo {
        let a: u8;
        let b: u8;
    }
}

module idk_something_else {
    derives Foo {
        fn add(self, b: u8) -> u8 {
            return self + b;
        }
    }

    let inst = Foo();

    inst.add();
}






//                             ffi "py" import os; ffi "py" import time; ffi "py" import
//                         math; fn main() { let A: float = 0.0; let B:
//                 float = 0.0; while true { let z: list<float> =  [0.0]*1760; let
//         b: list<string> = [" "]*1760; for (let j in range(0, 628, 7)){for(let i in
//     range(0, 628, 2)) { let c: float = math::      sin(i); let d:float=math::cos(j);let
// e: float = math::sin(A); let f: float                      =math::sin(j);let g:float=math::cos(A);
// let h: float = d + 2; let D:                                      float=1/( c * h * e+ f * g + 5);
// let l: float = math::                                                cos  ( i )  ; let m :  float
// = math::cos(B); let                                                  n : float = math :: sin(B);
// let t: float = c * h                                                 * g-f*e;let x: int=int(40 +                                               30 * D * (l * h * m - t * n));
//    let y: int = int(12 + 15                                        * D * ( l * h  * n + t * m));
//        let o: int = int(x + 80 * y);                             let N:int=int(8* ((f * e - c *
//            d * g) * m - c * d * e - f *                        g - l * d * n)); if 0 <= y < 22
//                 && 0 <= x < 80 && D > z[o] {             z[o] = D; if N > 0 { let
//                     charIndex: int = N; } else {       let charIndex: int = 0; }
//                     b[o] = ".,-~:;=!*#$@"[charIndex]; } } } os::system("cls");
//                         for (let k: int = 0; k < 1760; k++) { if k %
//                             80 == 0 { print('\n', end=''); } else
//                                 { print(b[k], end=''); }} A
//                                     += 0.04; B += 0.02;time
//                                        ::sleep(0.03);}}









import "get_fooled/foo.hlix" as foo;


pub import get_fooled::foo::{SomenamespaceInFOO} as thing;

