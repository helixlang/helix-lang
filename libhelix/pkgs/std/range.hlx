///--- The Helix Project ------------------------------------------------------------------------///
///                                                                                              ///
///   Part of the Helix Project, under the Attribution 4.0 International license (CC BY 4.0).    ///
///   You are allowed to use, modify, redistribute, and create derivative works, even for        ///
///   commercial purposes, provided that you give appropriate credit, and indicate if changes    ///
///   were made.                                                                                 ///
///                                                                                              ///
///   For more information on the license terms and requirements, please visit:                  ///
///     https://creativecommons.org/licenses/by/4.0/                                             ///
///                                                                                              ///
///   SPDX-License-Identifier: CC-BY-4.0                                                         ///
///   Copyright (c) 2024 The Helix Project (CC BY 4.0)                                           ///
///                                                                                              ///
///------------------------------------------------------------------------------------ Helix ---///

interface RangeIncrementable {
    op ++ fn (self)              -> self;
    op <  fn (self, other: self) -> bool;
}

fn range(end: T) -> yield T
  requires <T> if T has RangeIncrementable {

    let start = T();

    while start < end {
        yield start;
        ++start;
    }
}

fn range(start: T, end: T, step: T = 1) -> yield T
  requires <T> if T has RangeIncrementable {

    while start < end {
        yield start;

        for _ in range(step) {
            ++start;
        }
    }
}
