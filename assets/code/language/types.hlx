import std::Errors;
import std::Interfaces;
import std::Memory::Heap;

// NOTE: None of the standard library modules are implemented yet. The usage of any standard library
//       module here is a placeholder and is subject to change. The syntax for the most part is final.

fn main() -> i32 {
    let int_holder = Holder::<int>(69);

    finally { // The finally block is executed when the scope is exited, even if an error occurs.
        // Here, theres no need to manually delete the object since it's on the stack. Helix manages
        // stack memory. But there's no harm in manually deleting it either.
        delete int_holder;
    }

    // Helix has type inference, so theres no need to specify the type of value. But any modifiers
    // like pointers, questionable, etc. must be specified. (enforced for readability and safety)
    let *value? = int_holder.get(1);
    
    if !(value?) { // if value is null or panicked
        value = Heap::construct::<int>(21); // Equivalent to new int(21) in C++
    }

    // Helix has support for named parameters/default values
    let *invalid_value? = int_holder.get(index=100); // Attempt to fetch an out-of-bounds value
    
    if invalid_value?:
        print(invalid_value);
    else if invalid_value == null:
        print("The value is null");
    else if Errors::BoundsError in invalid_value:
        print("The index is out of bounds!"); // This gets printed
    else:
        print("The value is in an unknown state");

    return 0;
}

// Structs in Helix are data containers with no methods.
// They can include: operator overloads, nested structs, destructors, enums, and fields.
// All fields are public by default.
struct Data {
    // Regular pointers: non-nullable, no arithmetic, and auto-dereferenced (like references in other languages).
    let value: *T?;
}

// Classes in Helix support methods, fields, and constructors.
// Fields are private by default, while methods and constructors are public by default.
class Holder requires <T> {
    // Unsafe pointers: nullable, allow pointer arithmetic, and require manual dereferencing.
    let num_values:  usize;
    let many_values: unsafe *Data;

    fn Holder(self, num_values: usize = 10) {
        eval if !(T has Interfaces::DefaultConstructible) { // Check at compile-time
            // Panic behaves like a throw in C++ when the return type is not questionable.
            panic Errors::InvalidTypeError("The type T must be default constructible");
        }

        // Equivalent to (Data*)malloc(sizeof(Data) * num_values) in C
        self.many_values = unsafe Heap::allocate::<Data>(num_values);
        self.num_values  = num_values;

        for i in 0..num_values {
            self.many_values[i].value = null;
        }
    }

    op delete fn (self) {
        for i in 0..self.num_values {
            if self.many_values[i].value? {
                Heap::drop(self.many_values[i].value);
            }
        }

        Heap::drop(self.many_values);
    }

    fn get(self, index: usize) -> *T?
      requires <T> {
        if index < self.num_values {
            return self.many_values[index].value;
        } else {
            panic Errors::BoundsError("The index is out of bounds");
        }
    }
}