// filename: peripherals.hlx

// Optional alias 'as peripherals': This allows you to import the header under a module name.
// If no alias is provided, the class is imported into the global scope of this file. (like in C++)
ffi "c++" import "peripherals.hh";

import libcxx::Ref;

// Helix represents C++ references as 'libcxx::Ref::<type>' as it doesn't support reference semantics.
fn Peripheral::<ConnectionType>
  ::Peripheral(self, const name: libcxx::Ref::<libcxx::string>) requires <ConnectionType> {
    self.m_name           = name;
    self.m_connected      = false;
    self.m_connectionType = ConnectionType();
}

// The C++ 'std' namespace maps to 'libcxx' in Helix, enabling seamless integration with legacy or
// external C++ code. If you have the ability to adapting/modify the C++ code, it's recommended to
// use the Helix standard library in the C++ code.
fn WirelessKeyboard
  ::WirelessKeyboard(self, const name: libcxx::Ref::<libcxx::string>) {
    Peripheral::<libcxx::string>(name);
    self.m_batteryLevel = 100;
}

fn WirelessKeyboard
  ::connect(self) -> bool {
    if !self.m_connected {
        self.m_connected = true;
        print(f"WirelessKeyboard '{self.m_name}' connected successfully.");
        return true;
    }

    print(f"WirelessKeyboard '{self.m_name}' is already connected.");
    return false;
}

const fn WirelessKeyboard
  ::getType(self) -> libcxx::string {
    return "WirelessKeyboard";
}

const fn WirelessKeyboard
  ::getBatteryLevel(self) -> i32 /* same size as C++ int */ {
    return self.m_batteryLevel;
}

fn main() -> i32 {
    let keyboard = WirelessKeyboard("Logitech K380");

    if keyboard.connect():
        print("Keyboard connected successfully.");
    else:
        print("Keyboard is already connected.");

    printPeripheralType(keyboard); // defined in peripherals.hh

    if keyboard.isWirelessConnection():
        print("The keyboard uses a wireless connection.");
    else:
        print("The keyboard does not use a wireless connection.");

    print(f"Battery Level: {keyboard.getBatteryLevel()}%");
    return 0;
}
